<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>宏任务与微任务</title>
    <url>/2020/06/06/JavaScript/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="宏任务微任务"><a href="#宏任务微任务" class="headerlink" title="宏任务微任务"></a>宏任务微任务</h2>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Debugger for Chrome</title>
    <url>/2020/06/05/Vscode/vscode%20debugger%20fo%20Chrome%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p><a href="http://shooterblog.site/2018/05/19/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%94%A8Vscode%20Debugger%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/#Debugger-For-Chrome" target="_blank" rel="noopener">参考链接</a></p>
<p><a href="https://www.barretlee.com/blog/2019/03/18/debugging-in-vscode-tutorial/" target="_blank" rel="noopener">https://www.barretlee.com/blog/2019/03/18/debugging-in-vscode-tutorial/</a></p>
]]></content>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>学习资源/学习资源</title>
    <url>/2020/06/03/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>ajax</title>
    <url>/2020/06/03/ajax/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Axios学习</title>
    <url>/2020/06/03/Ajax/Axios%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="什么是-axios？"><a href="#什么是-axios？" class="headerlink" title="什么是 axios？"></a>什么是 axios？</h2><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p>
<h2 id="Axios请求返回一个Promise对象"><a href="#Axios请求返回一个Promise对象" class="headerlink" title="Axios请求返回一个Promise对象"></a>Axios请求返回一个Promise对象</h2><p>打印Axios请求返回的数据res.data,结果是undefined.</p>
<pre><code class="js">const res = axios.get(&#39;https://gonelist.cugxuan.cn/onedrive/getallfiles&#39;)
console.log(res.data) //undefined</code></pre>
<p>问题在于axios返回的是一个Promise对象,需要用then catch捕获</p>
<p><strong>正确的写法:</strong></p>
<pre><code class="js">const res = axios
    .get(&#39;https://gonelist.cugxuan.cn/onedrive/getallfiles&#39;)
    .then(result =&gt; {
        console.log(result)
    })
    .catch(err =&gt; {
        console.log(err)
    })</code></pre>
<h3 id="通过Axios实例来发送请求"><a href="#通过Axios实例来发送请求" class="headerlink" title="通过Axios实例来发送请求"></a>通过Axios实例来发送请求</h3><h4 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h4><h5 id="axios-create-config"><a href="#axios-create-config" class="headerlink" title="axios.create([config])"></a>axios.create([config])</h5><pre><code class="js">const instance = axios.create({
  baseURL: &#39;https://some-domain.com/api/&#39;,
  timeout: 1000,
  headers: {&#39;X-Custom-Header&#39;: &#39;foobar&#39;}
});</code></pre>
]]></content>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Number对应方法</title>
    <url>/2020/06/02/JavaScript/Number%E5%BA%93/</url>
    <content><![CDATA[<h1 id="Number-prototype-toFixed"><a href="#Number-prototype-toFixed" class="headerlink" title="Number.prototype.toFixed()"></a>Number.prototype.toFixed()</h1><p><code>**toFixed()**</code> 方法使用定点表示法来格式化一个数值。四舍五入</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>小数点后数字的个数；介于 0 到 20 （包括）之间，实现环境可能支持更大范围。如果忽略该参数，则默认为 0。</td>
<td>使用定点表示法表示给定数字的字符串。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js图片转base64格式</title>
    <url>/2020/06/01/JavaScript/js%E5%9B%BE%E7%89%87%E8%BD%ACbase64/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>git子仓库管理</title>
    <url>/2020/06/01/Git/Git%E5%AD%90%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p><a href="https://upupming.site/2018/05/31/git-submodules/#%E4%BB%93%E5%BA%93%E5%86%85%E5%85%8B%E9%9A%86%E5%85%B6%E4%BB%96%E4%BB%93%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">参考链接</a></p>
<blockquote>
<p>问题: 在git仓库内还有别的仓库</p>
</blockquote>
<p>在内部仓库git add 后会提示:</p>
<pre><code class="bash">warning: adding embedded git repository: plugins/zsh-autosuggestions
hint: You&#39;ve added another git repository inside your current repository.
hint: Clones of the outer repository will not contain the contents of
hint: the embedded repository and will not know how to obtain it.
hint: If you meant to add a submodule, use:
hint: 
hint:     git submodule add &lt;url&gt; plugins/zsh-autosuggestions
hint: 
hint: If you added this path by mistake, you can remove it from the
hint: index with:
hint: 
hint:     git rm --cached plugins/zsh-autosuggestions
hint: 
hint: See &quot;git help submodule&quot; for more information.
warning: adding embedded git repository: plugins/zsh-syntax-highlighting</code></pre>
<h3 id="git-submodule的用法"><a href="#git-submodule的用法" class="headerlink" title="git submodule的用法"></a><a href="https://juejin.im/post/5ca47a84e51d4565372e46e0" target="_blank" rel="noopener">git submodule的用法</a></h3><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">git文档</a></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>iview-ui</title>
    <url>/2020/06/01/UI/ivew-ui/</url>
    <content><![CDATA[<h3 id="Table-props"><a href="#Table-props" class="headerlink" title="Table props"></a>Table props</h3><p> <a href="https://www.iviewui.com/components/table#Table_props" target="_blank" rel="noopener">#</a></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">说明</th>
<th align="left">类型</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">data</td>
<td align="left">显示的结构化数据，其中，字段 cellClassName 用于设置任意单元格的样式名称，因此数据不能使用该字段，详见示例<strong>特定样式</strong>。</td>
<td align="left">Array</td>
<td align="left">[]</td>
</tr>
<tr>
<td align="left">columns</td>
<td align="left">表格列的配置描述，具体项见后文</td>
<td align="left">Array</td>
<td align="left">[]</td>
</tr>
<tr>
<td align="left">stripe</td>
<td align="left">是否显示间隔斑马纹</td>
<td align="left">Boolean</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">border</td>
<td align="left">是否显示纵向边框</td>
<td align="left">Boolean</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">show-header</td>
<td align="left">是否显示表头</td>
<td align="left">Boolean</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">width</td>
<td align="left">表格宽度，单位 px</td>
<td align="left">Number | String</td>
<td align="left">自动</td>
</tr>
<tr>
<td align="left">height</td>
<td align="left">表格高度，单位 px，设置后，如果表格内容大于此值，会固定表头</td>
<td align="left">Number | String</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">max-height 3.4.0</td>
<td align="left">表格最大高度，单位 px，设置后，如果表格内容大于此值，会固定表头</td>
<td align="left">Number | String</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">loading</td>
<td align="left">表格是否加载中</td>
<td align="left">Boolean</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">disabled-hover</td>
<td align="left">禁用鼠标悬停时的高亮</td>
<td align="left">Boolean</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">highlight-row</td>
<td align="left">是否支持高亮选中的行，即单选</td>
<td align="left">Boolean</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">row-class-name</td>
<td align="left">行的 className 的回调方法，传入参数：<code>row</code>：当前行数据<code>index</code>：当前行的索引</td>
<td align="left">Function</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">size</td>
<td align="left">表格尺寸，可选值为 <code>large</code>、<code>small</code>、<code>default</code> 或者不填</td>
<td align="left">String</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">no-data-text</td>
<td align="left">数据为空时显示的提示内容</td>
<td align="left">String</td>
<td align="left">暂无数据</td>
</tr>
<tr>
<td align="left">no-filtered-data-text</td>
<td align="left">筛选数据为空时显示的提示内容</td>
<td align="left">String</td>
<td align="left">暂无筛选结果</td>
</tr>
<tr>
<td align="left">draggable 3.3.0</td>
<td align="left">是否开启拖拽调整行顺序，需配合 @on-drag-drop 事件使用</td>
<td align="left">Boolean</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">tooltip-theme 3.3.0</td>
<td align="left">列使用 tooltip 时，配置它的主题，可选值为 dark 或 light</td>
<td align="left">String</td>
<td align="left">dark</td>
</tr>
<tr>
<td align="left">row-key 3.4.0</td>
<td align="left">是否强制使用内置的 row-key，开启后可能会影响性能，4.1.0 支持 String</td>
<td align="left">Boolean | String</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">span-method 4.0.0</td>
<td align="left">合并行或列的计算方法</td>
<td align="left">Function</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">show-summary 4.0.0</td>
<td align="left">是否在表尾显示合计行</td>
<td align="left">Boolean</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">sum-text 4.0.0</td>
<td align="left">合计行第一列的文本</td>
<td align="left">String</td>
<td align="left">合计</td>
</tr>
<tr>
<td align="left">summary-method 4.0.0</td>
<td align="left">自定义的合计计算方法</td>
<td align="left">Function</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">indent-size 4.1.0</td>
<td align="left">树形数据缩进宽度，单位 px</td>
<td align="left">Number</td>
<td align="left">16</td>
</tr>
<tr>
<td align="left">load-data 4.1.0</td>
<td align="left">异步加载树形数据的方法，详见示例</td>
<td align="left">Function</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">context-menu 4.1.0</td>
<td align="left">当前行点击右键是否会阻止默认行为</td>
<td align="left">Boolean</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">show-context-menu 4.2.0</td>
<td align="left">点击右键弹出菜单，需配合 slot <code>contextMenu</code> 一起使用，详见示例</td>
<td align="left">Boolean</td>
<td align="left">false</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>vue-cli的使用</title>
    <url>/2020/06/01/Vue/vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><a href="https://juejin.im/post/5c73d879e51d454b4755603f" target="_blank" rel="noopener">参考链接</a></p>
<h3 id="vue-cli基本命令"><a href="#vue-cli基本命令" class="headerlink" title="vue-cli基本命令"></a>vue-cli基本命令</h3><p><img src="https://user-gold-cdn.xitu.io/2019/2/25/169248590b2fbadc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<h3 id="vue-config-js的配置"><a href="#vue-config-js的配置" class="headerlink" title="vue.config.js的配置"></a><a href="https://juejin.im/post/5c77d0b9e51d455fb110c394#comment" target="_blank" rel="noopener">vue.config.js的配置</a></h3>]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加字体图标</title>
    <url>/2020/05/27/%E5%8D%9A%E5%AE%A2/hexo%E6%B7%BB%E5%8A%A0%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="Hexo添加字体图标"><a href="#Hexo添加字体图标" class="headerlink" title="Hexo添加字体图标"></a>Hexo添加字体图标</h2>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>adb开启无障碍</title>
    <url>/2020/05/22/Android/adb%E5%BC%80%E5%90%AF%E6%97%A0%E9%9A%9C%E7%A2%8D/</url>
    <content><![CDATA[<h3 id="获取已开启无障碍列表"><a href="#获取已开启无障碍列表" class="headerlink" title="获取已开启无障碍列表"></a>获取已开启无障碍列表</h3><pre><code class="bash">adb shell settings get secure enabled_accessibility_services</code></pre>
<h3 id="通过adb开启无障碍"><a href="#通过adb开启无障碍" class="headerlink" title="通过adb开启无障碍"></a>通过adb开启无障碍</h3><blockquote>
<p>起因是因为在我的S9+上开启autojs的无障碍时会卡死</p>
<p>于是想到了通过adb shell  来开启无障碍</p>
</blockquote>
<p>命令</p>
<pre><code class="bash">adb shell settings put secure enabled_accessibility_services org.autojs.autojs/org.autojs.autojs.accessibility.AccessibilityService</code></pre>
<p>其中enabled_accessibility_services 是开启无障碍功能的程序列表。org.autojs.autojs是包名,org.autojs.autojs.accessibility.AccessibilityService是对应的服务名</p>
<p>enabled_accessibility_services列表</p>
<pre><code class="bash"># autojs
org.autojs.autojs/org.autojs.autojs.accessibility.AccessibilityService
# 开发者助手
com.toshiba_dealin.developerhelper/com.toshiba_dealin.developerhelper.service.DHAccessibilityService</code></pre>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Fiddler抓包</title>
    <url>/2020/05/20/Http/Fiddler%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="远程抓包手机时出现的安全证书问题"><a href="#远程抓包手机时出现的安全证书问题" class="headerlink" title="远程抓包手机时出现的安全证书问题"></a>远程抓包手机时出现的安全证书问题</h3><p><a href="https://blog.csdn.net/yu1014745867/article/details/79108495" target="_blank" rel="noopener">在手机上安装证书</a></p>
<ol>
<li>fiddler设置手机代理</li>
<li>手机输出电脑IP:8888,下载安装证书</li>
</ol>
<p><a href="http://www.51ste.com/ask/answer-183.html" target="_blank" rel="noopener"><strong>左下角的capturing有什么用</strong></a></p>
<p>Fiddler 左下角的“Capturing”。其实是File &gt; Capture Traffic的快捷键，可以控制是否把 Fiddler 注册为PC系统代理。</p>
]]></content>
      <tags>
        <tag>Http</tag>
      </tags>
  </entry>
  <entry>
    <title>React学习</title>
    <url>/2020/05/17/React/React%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul>
<li>创建React元素</li>
</ul>
<pre><code class="js">// 1. 创建React元素
// 参数1：创建的元素名
// 参数2：元素的属性，如果没有，可以为null
// 参数3：元素的子节点或内容
// ...
// 返回值：React元素
const title = React.createElement(&#39;h1&#39;, null, &#39;Hello React&#39;)</code></pre>
<ul>
<li>渲染React元素</li>
</ul>
<pre><code class="js">// 参数1：要渲染的react元素
// 参数2：挂载点，需要将react元素渲染到哪儿
ReactDOM.render(title, document.getElementById(&#39;root&#39;))</code></pre>
<a id="more"></a>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>this.setState()可能是异步的.</p>
<p><a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html" target="_blank" rel="noopener">官方原文:</a></p>
<blockquote>
<h3 id="State-的更新可能是异步的"><a href="#State-的更新可能是异步的" class="headerlink" title="State 的更新可能是异步的"></a>State 的更新可能是异步的</h3><p>出于性能考虑，React 可能会把多个 <code>setState()</code> 调用合并成一个调用。</p>
<p>因为 <code>this.props</code> 和 <code>this.state</code> 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。</p>
</blockquote>
<blockquote>
<h4 id="回调函数this丢失问题"><a href="#回调函数this丢失问题" class="headerlink" title="回调函数this丢失问题"></a>回调函数this丢失问题</h4><pre><code class="js">const module = {
  x: 42,
  getX: function() {
    return this.x;
  }
};
console.log(module.getX());
const unboundGetX = module.getX; //this会丢失
console.log(unboundGetX()); // The function gets invoked at the global scope
// expected output: undefined

const boundGetX = unboundGetX.bind(module);
console.log(boundGetX());
// expected output: 42</code></pre>
<p>解决方法:使用bind()</p>
</blockquote>
<h3 id="React组件中共享state"><a href="#React组件中共享state" class="headerlink" title="React组件中共享state"></a>React组件中共享state</h3><blockquote>
<p>在 React 中，将多个组件中需要共享的 state 向上移动到它们的最近共同父组件中，便可实现共享 state。这就是所谓的“==状态提升==”。接下来，我们将 <code>TemperatureInput</code> 组件中的 state 移动至 <code>Calculator</code> 组件中去。</p>
</blockquote>
<h3 id="React生命周期"><a href="#React生命周期" class="headerlink" title="React生命周期"></a>React生命周期</h3><pre><code class="jsx">import React from &#39;react&#39;
import ReactDOM from &#39;react-dom&#39;

// 组件的创建阶段(挂载阶段)
// 1. constructor()
//    (1) 提供初始化的数据, this.state={ ... }
//    (2) 创建 ref  this.demoRef = React.createRef()   将来 ref={this.demoRef}
//    (3) 处理this指向问题  this.handleClick = this.handleClick.bind(this)
// 2. render()
//    渲染UI, 但是在render中, 请不要调用 setState (死循环)
// 3. componentDidMount()  dom更新了
//    (1) 发送ajax请求
//    (2) dom操作

// 组件的更新阶段(组件重新渲染)
// 1. render() 渲染更新UI视图
// 2. componentDidUpdate() 更新完触发
// 在这两个钩子中, 不要调用 setState (死循环)
class App extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      msg: &#39;嘎嘎&#39;,
    }
    console.log(&#39;constructor&#39;)
  }
  render() {
    console.log(&#39;render&#39;)
    return (
      &lt;div&gt;
        &lt;h1&gt;我是app组件&lt;/h1&gt;
      &lt;/div&gt;
    )
  }
  componentDidMount() {
    console.log(&#39;componentDidMount&#39;)
  }
  componentDidUpdate() {
    console.log(&#39;componentDidUpdate&#39;)
  }
}

ReactDOM.render(&lt;App&gt;&lt;/App&gt;, document.getElementById(&#39;root&#39;))</code></pre>
<h2 id="Router路由"><a href="#Router路由" class="headerlink" title="Router路由"></a>Router路由</h2><p>Router包裹</p>
<p><code>&lt;Link&gt;</code>和<code>&lt;NavLink&gt;</code>是用来包裹显示的跳转链接的</p>
<p><code>&lt;Route&gt;</code>是用来包裹点击跳转链接后要显示的内容</p>
<pre><code class="jsx">&lt;Route exact path=&quot;/home&quot; component={Home} /&gt;

// 等效于 
&lt;Route exact path=&quot;/home&quot;&gt;
     &lt;Detail&gt;
&lt;/Route&gt;</code></pre>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>linux解压缩命令</title>
    <url>/2020/05/12/Linux/tar%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Linux下的解压命令小结"><a href="#Linux下的解压命令小结" class="headerlink" title="Linux下的解压命令小结"></a><a href="https://www.cnblogs.com/cursorhu/p/5891699.html" target="_blank" rel="noopener">Linux下的解压命令小结</a></h2><p><a href="https://www.cnblogs.com/cursorhu/p/5891699.html" target="_blank" rel="noopener">https://www.cnblogs.com/cursorhu/p/5891699.html</a></p>
<a id="more"></a>

<h4 id="解压缩命令"><a href="#解压缩命令" class="headerlink" title="解压缩命令"></a>解压缩命令</h4><h5 id="打包程序：tar"><a href="#打包程序：tar" class="headerlink" title="打包程序：tar"></a>打包程序：tar</h5><ul>
<li>c:  创建文档</li>
<li>t： 列出存档内容</li>
<li>x：提取存档</li>
<li>f： filename 要操作的文档名</li>
<li>v：详细信息</li>
</ul>
<p>解压：</p>
<blockquote>
<p>解压缩文件加一个参数x：tar xf a.tar.gz</p>
</blockquote>
<pre><code class="bash">[root@104 www]# tar xf wordpress-4.6.15.tar.gz</code></pre>
<h4 id="解压命令"><a href="#解压命令" class="headerlink" title="解压命令"></a>解压命令</h4><pre><code class="bash">tar -zxvf filename.tar.gz</code></pre>
<p>其中zxvf含义分别如下</p>
<p>z: 　　g<strong>z</strong>ip  　　　　　　　   压缩格式</p>
<p>x: 　　e<strong>x</strong>tract　　　　　　　　  解压</p>
<p>v:　　 <strong>v</strong>erbose　　　　　　　　详细信息</p>
<p>f: 　　<strong>f</strong>ile(file=archieve)　　　　文件</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云</title>
    <url>/2020/04/23/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%85%BE%E8%AE%AF%E4%BA%91/</url>
    <content><![CDATA[<h2 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h2><p><a href="https://cloud.tencent.com/act/vouchers/list" target="_blank" rel="noopener">腾讯云代金券</a></p>
<p><a href="https://cloud.tencent.com/act" target="_blank" rel="noopener">腾讯云最新活动</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>rclone使用</title>
    <url>/2020/04/16/%E6%90%9E%E6%9C%BA%E6%8A%98%E8%85%BE/rclone%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="官方配置文档"><a href="#官方配置文档" class="headerlink" title="官方配置文档"></a><a href="https://rclone.org/commands/rclone_config/" target="_blank" rel="noopener">官方配置文档</a></h3><p><a href="https://softlns.github.io/2016/11/28/rclone-guide/" target="_blank" rel="noopener">参考文档</a></p>
<p><a href="https://p3terx.com/archives/rclone-installation-and-configuration-tutorial.html" target="_blank" rel="noopener">挂载onedrive参考文档</a></p>
<h3 id="挂载onedrive"><a href="#挂载onedrive" class="headerlink" title="挂载onedrive"></a>挂载onedrive</h3><pre><code class="bash">rclone mount myonedrive:/ o: --cache-dir D:\OneDriveTemp --allow-other --vfs-cache-mode writes --allow-non-empty &amp;</code></pre>
<p>这样会有个cmd框一直在后台运行.不是很方便</p>
<p>新建一个Start.vbs文件</p>
<pre><code class="vbscript">CreateObject(&quot;WScript.Shell&quot;).Run &quot;rclone mount myonedrive:/ o: --cache-dir D:\OneDriveTemp --allow-other --vfs-cache-mode writes --allow-non-empty&quot;,0</code></pre>
<p>即可后台运行</p>
<hr>
<h3 id="VBscript"><a href="#VBscript" class="headerlink" title="VBscript"></a>VBscript</h3><p><strong>WScript.Shell对象的 run 和 exec 函数功能使用详解</strong></p>
<pre><code class="vbscript">Set Ws = CreateObject(&quot;Wscript.Shell&quot;)
Function Exec(ByVal Command As String) As WshExec
Function Run(ByVal Command As String, [ByVal WindowStyle], [ByVal WaitOnReturn]) As Integer</code></pre>
<p>2.执行参数<br>  Run 的后两个参数，一个是 cmd 窗口的风格，一个是是否等待执行完成。</p>
<p>第二个参数是窗口的形式，0是在后台运行；1表示正常运行；2表示激活程序并且显示为最小化；3表示激活程序并且显示为最大化；一共有10个这样的参数如下表。</p>
<p>第三个参数是表示这个脚本是等待还是继续执行，如果设为了 true，脚本就会等待调用的程序退出后再向后执行。</p>
<pre><code class="vbscript">&#39;创建一个对象引用&#39;
Set Ws = CreateObject(&quot;Wscript.Shell&quot;)
Ws.Run(&quot;strCommand&quot;,0,true)</code></pre>
]]></content>
  </entry>
  <entry>
    <title>autohotky使用</title>
    <url>/2020/04/16/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE/AutoHotKey%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><a href="https://wyagd001.github.io/zh-cn/docs/AutoHotkey.htm" target="_blank" rel="noopener">官方文档</a></p>
<p><strong>常用热键</strong></p>
<blockquote>
<p><strong>#</strong> 号代表 <strong><em>Win\</em></strong> 键；<br><strong>!</strong> 号代表 <strong><em>Alt\</em></strong> 键；<br><strong>^</strong> 号代表 <strong><em>Ctrl\</em></strong> 键；<br><strong>+</strong> 号代表 <strong><em>shift\</em></strong> 键；<br><strong>::</strong> 号(两个英文冒号)起分隔作用；<br><strong>run</strong>，非常常用 的 AHK 命令之一;<br><strong>;</strong> 号代表 注释后面一行内容；</p>
</blockquote>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>ln命令</title>
    <url>/2020/04/14/Linux/ln%E5%91%BD%E4%BB%A4-linux%E7%94%9F%E6%88%90%E8%BD%AF%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h3 id="ln命令语法"><a href="#ln命令语法" class="headerlink" title="ln命令语法"></a>ln命令语法</h3><pre><code class="bash">ln </code></pre>
<pre><code class="bash">[cheng@104 ~]$ ln --help
Usage: ln [OPTION]... [-T] TARGET LINK_NAME   (1st form)
  or:  ln [OPTION]... TARGET                  (2nd form)
  or:  ln [OPTION]... TARGET... DIRECTORY     (3rd form)
  or:  ln [OPTION]... -t DIRECTORY TARGET...  (4th form)
In the 1st form, create a link to TARGET with the name LINK_NAME.
In the 2nd form, create a link to TARGET in the current directory.
In the 3rd and 4th forms, create links to each TARGET in DIRECTORY.
Create hard links by default, symbolic links with --symbolic.
By default, each destination (name of new link) should not already exist.
When creating hard links, each TARGET must exist.  Symbolic links
can hold arbitrary text; if later resolved, a relative link is
interpreted in relation to its parent directory.

Mandatory arguments to long options are mandatory for short options too.
      --backup[=CONTROL]      make a backup of each existing destination file
  -b                          like --backup but does not accept an argument
  -d, -F, --directory         allow the superuser to attempt to hard link
                                directories (note: will probably fail due to
                                system restrictions, even for the superuser)
  -f, --force                 remove existing destination files
  -i, --interactive           prompt whether to remove destinations
  -L, --logical               dereference TARGETs that are symbolic links
  -n, --no-dereference        treat LINK_NAME as a normal file if
                                it is a symbolic link to a directory
  -P, --physical              make hard links directly to symbolic links
  -r, --relative              create symbolic links relative to link location
  -s, --symbolic              make symbolic links instead of hard links
  -S, --suffix=SUFFIX         override the usual backup suffix
  -t, --target-directory=DIRECTORY  specify the DIRECTORY in which to create
                                the links
  -T, --no-target-directory   treat LINK_NAME as a normal file always
  -v, --verbose               print name of each linked file
      --help     display this help and exit
      --version  output version information and exit

The backup suffix is &#39;~&#39;, unless set with --suffix or SIMPLE_BACKUP_SUFFIX.
The version control method may be selected via the --backup option or through
the VERSION_CONTROL environment variable.  Here are the values:

  none, off       never make backups (even if --backup is given)
  numbered, t     make numbered backups
  existing, nil   numbered if numbered backups exist, simple otherwise
  simple, never   always make simple backups

Using -s ignores -L and -P.  Otherwise, the last option specified controls
behavior when a TARGET is a symbolic link, defaulting to -P.

GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;
For complete documentation, run: info coreutils &#39;ln invocation&#39;
</code></pre>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>es6之Promise对象的学习</title>
    <url>/2020/04/12/JavaScript/es6%E4%B9%8BPromise%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><strong>一般总是建议，Promise 对象后面要跟<code>catch()</code>方法，这样可以处理 Promise 内部发生的错误。`c</strong>atch()<code>方法返回的还是一个 Promise 对象，因此后面还可以接着调用</code>then()`方法。</p>
<pre><code class="js">const someAsyncThing = function() {
  return new Promise(function(resolve, reject) {
    // 下面一行会报错，因为x没有声明
    resolve(x + 2);
  });
};

someAsyncThing()
.catch(function(error) {
  console.log(&#39;oh no&#39;, error);
})
.then(function() {
  console.log(&#39;carry on&#39;);
});
// oh no [ReferenceError: x is not defined]
// carry on</code></pre>
<p>上面代码运行完<code>catch()</code>方法指定的回调函数，会接着运行后面那个<code>then()</code>方法指定的回调函数。如果没有报错，则会跳过<code>catch()</code>方法。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>centos安装nodejs的坑</title>
    <url>/2020/04/10/Linux/centos%E5%AE%89%E8%A3%85nodejs%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h3 id="centos安装nodejs遇到的坑"><a href="#centos安装nodejs遇到的坑" class="headerlink" title="centos安装nodejs遇到的坑"></a>centos安装nodejs遇到的坑</h3><p><a href="https://linuxize.com/post/how-to-install-node-js-on-centos-7/" target="_blank" rel="noopener">https://linuxize.com/post/how-to-install-node-js-on-centos-7/</a></p>
<h4 id="1-添加NodeSource-yum存储库"><a href="#1-添加NodeSource-yum存储库" class="headerlink" title="1.添加NodeSource yum存储库"></a>1.添加NodeSource yum存储库</h4><pre><code class="bash">curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -</code></pre>
<h4 id="2-安装Node-js和npm"><a href="#2-安装Node-js和npm" class="headerlink" title="2.安装Node.js和npm"></a>2.安装Node.js和npm</h4><pre><code class="bash">sudo yum install nodejs</code></pre>
<h4 id="3-验证Node-js和npm安装"><a href="#3-验证Node-js和npm安装" class="headerlink" title="3.验证Node.js和npm安装"></a>3.验证Node.js和npm安装</h4><pre><code class="bash">node --version
npm --version</code></pre>
<p><img src="D:%5Cblog%5Csource_posts%5CLinux%5Ccentos%E5%AE%89%E8%A3%85nodejs%E7%9A%84%E5%9D%91.assets%5Cimage-20200410175256657.png" alt="image-20200410175256657"></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>json-server</title>
    <url>/2020/04/10/nodejs/json-server/</url>
    <content><![CDATA[<h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><ul>
<li>get    查询</li>
<li>post   添加</li>
<li>delete   删除</li>
<li>put    全量修改</li>
<li>patch    局部修改</li>
</ul>
]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>zsh终端配置</title>
    <url>/2020/04/08/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE/zsh%E7%BB%88%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener">oh-my-zsh官网</a></p>
<h3 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH" target="_blank" rel="noopener">安装zsh</a></h3><p>centos</p>
<pre><code class="bash">yum install zsh    #安装zsh

chsh -s $(which zsh)    #使其成为默认shell</code></pre>
<h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h3><pre><code class="bash">$ sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</code></pre>
<h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><h4 id="autojump自动跳转插件"><a href="#autojump自动跳转插件" class="headerlink" title="autojump自动跳转插件"></a><a href="https://github.com/wting/autojump" target="_blank" rel="noopener">autojump</a>自动跳转插件</h4><pre><code class="bash"># clone 到本地
git clone git://github.com/wting/autojump.git
# 进入clone目录，接着执行安装文件
cd autojump
./install.py
# 接着根据安装完成后的提示，在~/.zshrc最后添加下面语句：
vim ~/.zshrc    
[[ -s /home/cheng/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; source /home/cheng/
.autojump/etc/profile.d/autojump.sh</code></pre>
<p>安装后启用插件</p>
<pre><code class="bash"># 编辑~/.zshrc   
vim ~/.zshrc    
# 在plugins后括号里添加安装的插件名字
plugins=(
  git 
  autojump 
  zsh-autosuggestions
  zsh-syntax-highlighting
)
# 最后刷新
source ~/.zshrc    </code></pre>
<h4 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a><a href="">zsh-autosuggestions</a></h4><ol>
<li>安装到<code>$ZSH_CUSTOM/plugins</code>（默认情况下<code>~/.oh-my-zsh/custom/plugins</code>）</li>
</ol>
<pre><code class="bash">git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</code></pre>
<p>2.将插件添加到插件列表中，以供Oh My Zsh加载（在内部<code>~/.zshrc</code>）：</p>
<pre><code class="bash">plugins=(zsh-autosuggestions)</code></pre>
<h4 id="语法高亮插件-zsh-syntax-highlighting"><a href="#语法高亮插件-zsh-syntax-highlighting" class="headerlink" title="语法高亮插件 zsh-syntax-highlighting"></a><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">语法高亮插件 zsh-syntax-highlighting</a></h4><p>请注意，<code>zsh-syntax-highlighting</code>该插件必须是最后一个来源。</p>
<ol>
<li><p>将此存储库克隆到oh-my-zsh的plugins目录中：</p>
<pre><code class="bash">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code></pre>
</li>
<li><p>在中激活插件<code>~/.zshrc</code>：</p>
<pre><code class="bash">plugins=( [plugins...] zsh-syntax-highlighting)</code></pre>
</li>
</ol>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery ajax</title>
    <url>/2020/04/08/jQuery/jQuery.ajax/</url>
    <content><![CDATA[<h3 id="ajax-方法"><a href="#ajax-方法" class="headerlink" title="$.ajax()方法"></a>$.ajax()方法</h3><p><img src="https://minimax-1256590847.cos.ap-shanghai.myqcloud.com/img/image-20200408121337537.png" alt="image-20200408121337537"></p>
]]></content>
      <tags>
        <tag>ajax</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode之js-beautify插件配置</title>
    <url>/2020/04/07/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE/js-beautify%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="js-beautify插件配置"><a href="#js-beautify插件配置" class="headerlink" title="js-beautify插件配置"></a>js-beautify插件配置</h2><p><a href="https://github.com/beautify-web/js-beautify" target="_blank" rel="noopener">官方文档</a></p>
<h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><pre><code class="bash">CLI Options:
  -f, --file       Input file(s) (Pass &#39;-&#39; for stdin)
  -r, --replace    Write output in-place, replacing input
  -o, --outfile    Write output to file (default stdout)
  --config         Path to config file
  --type           [js|css|html] [&quot;js&quot;] Select beautifier type (NOTE: Does *not* filter files, only defines which beautifier type to run)
  -q, --quiet      Suppress logging to stdout
  -h, --help       Show this help
  -v, --version    Show the version

Beautifier Options:
  -s, --indent-size                 Indentation size [4]
  -c, --indent-char                 Indentation character [&quot; &quot;]
  -t, --indent-with-tabs            Indent with tabs, overrides -s and -c
  -e, --eol                         Character(s) to use as line terminators.
                                    [first newline in file, otherwise &quot;\n]
  -n, --end-with-newline            End output with newline
  --editorconfig                    Use EditorConfig to set up the options
  -l, --indent-level                Initial indentation level [0]
  -p, --preserve-newlines           Preserve line-breaks (--no-preserve-newlines disables)
  -m, --max-preserve-newlines       Number of line-breaks to be preserved in one chunk [10]
  -P, --space-in-paren              Add padding spaces within paren, ie. f( a, b )
                                      #在括号内添加空格，即f（a，b）
  -E, --space-in-empty-paren        Add a single space inside empty paren, ie. f( )
                                      #在空括号内添加一个空格，即F（ ）
  -j, --jslint-happy                Enable jslint-stricter mode
  -a, --space-after-anon-function   Add a space before an anonymous function&#39;s parens, ie. function ()
                                      # 在匿名函数的括号之前添加一个空格，即。功能（）
  --space-after-named-function      Add a space before a named function&#39;s parens, i.e. function example ()
                                      #在命名函数的括号之前添加一个空格，即函数示例（）
  -b, --brace-style                 [collapse|expand|end-expand|none][,preserve-inline] [collapse,preserve-inline]
  -u, --unindent-chained-methods    Don&#39;t indent chained method calls
  -B, --break-chained-methods       Break chained method calls across subsequent lines
  -k, --keep-array-indentation      Preserve array indentation
  -x, --unescape-strings            Decode printable characters encoded in xNN notation
  -w, --wrap-line-length            Wrap lines that exceed N characters [0]
  -X, --e4x                         Pass E4X xml literals through untouched
  --good-stuff                      Warm the cockles of Crockford&#39;s heart
  -C, --comma-first                 Put commas at the beginning of new line instead of end
  -O, --operator-position           Set operator position (before-newline|after-newline|preserve-newline) [before-newline]
  --indent-empty-lines              Keep indentation on empty lines
  --templating                      List of templating languages (auto,django,erb,handlebars,php) [&quot;auto&quot;] auto = none in JavaScript, all in html</code></pre>
]]></content>
      <tags>
        <tag>vscodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>vuejs的学习</title>
    <url>/2020/04/03/Vue/vuejs%E5%88%9D%E6%8E%A5%E8%A7%A6/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="script引入"><a href="#script引入" class="headerlink" title="script引入"></a>script引入</h3><pre><code class="html">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</code></pre>
<p><strong>BootCdn</strong></p>
<pre><code class="html">&lt;script src=&quot;https://cdn.bootcss.com/vue/2.6.11/vue.js&quot;&gt;&lt;/script&gt;</code></pre>
<h3 id="vue-js有什么用，是用来做什么的（整理）"><a href="#vue-js有什么用，是用来做什么的（整理）" class="headerlink" title="vue.js有什么用，是用来做什么的（整理）"></a><a href="https://www.cnblogs.com/Renyi-Fan/p/9419742.html#_label6" target="_blank" rel="noopener">vue.js有什么用，是用来做什么的（整理）</a></h3><a id="more"></a>

<h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>默认监视的是对象的地址的变化</p>
<h4 id="v-bind-缩写"><a href="#v-bind-缩写" class="headerlink" title="v-bind(缩写 :)"></a>v-bind(缩写 :)</h4><p><code>v-bind:title=&quot;message&quot;</code></p>
<p>作用: 控制dom节点的(title)属性和Vue实例的(message)属性保持一致</p>
<h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p><code>v-if=&quot;seen&quot;</code></p>
<p>我们不仅可以把数据绑定到 DOM 文本或 attribute，还可以绑定到 DOM <strong>结构</strong>。</p>
<h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p><code>v-for=&quot;item in todos&quot;</code></p>
<h4 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on(缩写 @)"></a>v-on(缩写 @)</h4><p><code>v-on:click=&quot;reverseMessage&quot;</code></p>
<p>监听DOM事件</p>
<p><strong>reverseMessage</strong>是一个method方法</p>
<pre><code class="js">reverseMessage: function () {
    this.message = this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)
}</code></pre>
<h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p><code>v-model=&quot;message&quot;</code></p>
<p>数据和视图的双向绑定。</p>
<h3 id="实例生命周期钩子"><a href="#实例生命周期钩子" class="headerlink" title="实例生命周期钩子"></a>实例生命周期钩子</h3><p>钩子,在实例生命周期的不同阶段被调用，如 <a href="https://cn.vuejs.org/v2/api/#mounted" target="_blank" rel="noopener"><code>mounted</code></a>、<a href="https://cn.vuejs.org/v2/api/#updated" target="_blank" rel="noopener"><code>updated</code></a> 和 <a href="https://cn.vuejs.org/v2/api/#destroyed" target="_blank" rel="noopener"><code>destroyed</code></a>。生命周期钩子的 <code>this</code> 上下文指向调用它的 Vue 实例。</p>
<p><img src="https://minimax-1256590847.cos.ap-shanghai.myqcloud.com/img/image-20200420165643433.png" alt="image-20200420165643433"></p>
<h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>修饰符 (modifier) 是以半角句号 <code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>：</p>
<pre><code class="html">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;</code></pre>
<ul>
<li><code>.stop</code>    =&gt;    <code>e.stopPropagation()</code>    阻止冒泡</li>
<li><code>.prevent</code>   =&gt;   <code>e.preventDefault()</code>    阻止默认行为</li>
</ul>
<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>计算属性是用来写复杂逻辑语句的,相当于写好method 的data;与method的不同的是,计算属性是有缓存的,所以性能上更优。</p>
<p>写在computed中</p>
<p>computed和data类似,都是用来提供属性的</p>
<ul>
<li>计算属性默认只有getter,不过可以在需要时提供一个setter</li>
</ul>
<p>Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：<strong>侦听属性</strong>。</p>
<h3 id="过渡-amp-动画"><a href="#过渡-amp-动画" class="headerlink" title="过渡&amp;动画"></a>过渡&amp;动画</h3><p><img src="https://cn.vuejs.org/images/transition.png" alt="Transition Diagram"></p>
<p>如果你使用一个没有名字的 <code>transition</code>，则 <code>v-</code> 是这些类名的默认前缀。如果你使用了 <code>&lt;transition name=&quot;my-transition&quot;&gt;</code>,那么 <code>v-enter</code> 会替换为 <code>my-transition-enter</code>。</p>
<p>父传子通信</p>
<pre><code class="vue">&lt;hm-input placeholder=&quot;默认&quot;&gt;&lt;/hm-input&gt;</code></pre>
<p>placeholder属性传递到hm-input.vue子组件中的props中</p>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a><a href="https://cn.vuejs.org/v2/guide/filters.html#ad" target="_blank" rel="noopener">过滤器</a></h2><pre><code class="html">&lt;!-- 在双花括号中 --&gt;
{{ message | capitalize }}

&lt;!-- 在 `v-bind` 中 --&gt;
&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</code></pre>
<h2 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h2><p>一个组件的<code>data</code>必须是一个函数,因此每个实例可以维护一份被返回对象的独立的拷贝：</p>
<pre><code class="js">data: function () {
  return {
    count: 0
  }
}</code></pre>
<h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a><a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">Vue-Router</a></h2><h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><p>hash模式和history模式</p>
<p>vue-router默认hash模式,url会带有”#”标识符,如果想要去除#标识,启用history模式.</p>
<p>注意:当启用history模式 时,地址栏不可带有/#/,否则会访问出错</p>
<p><a href="https://juejin.im/post/5cde4404f265da1b971a42c8" target="_blank" rel="noopener"><strong>hash模式和history模式的不同</strong></a></p>
<h3 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h3><p>在<code>vue-router</code>中使用“动态路由参数”来匹配，使用<code>：</code>标记。</p>
<h4 id="router和-route的区别"><a href="#router和-route的区别" class="headerlink" title="$router和$route的区别"></a>$router和$route的区别</h4><p>$router是VueRouter的实例,是路由操作对象,只写对象,想要导航到不同的url,则使用router.push()方法</p>
<p>$route为当前router跳转对象,路由信息对象,只读对象,里面可以获取name、path、query、params等</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>npm使用</title>
    <url>/2020/04/01/js%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/npm%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="NPM-CLI-vs-Yarn-CLI"><a href="#NPM-CLI-vs-Yarn-CLI" class="headerlink" title="NPM CLI vs Yarn CLI"></a>NPM CLI vs Yarn CLI</h2><p><a href="https://github.com/zuojj/fedlab/issues/3" target="_blank" rel="noopener">https://github.com/zuojj/fedlab/issues/3</a></p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>安装模块</p>
<pre><code class="bash">npm install [package]</code></pre>
<p><strong>-S, –save 安装包信息将加入到dependencies（生产阶段的依赖）</strong></p>
<pre><code class="bash">npm install gulp --save 或 npm install gulp -S

yarn add [package]</code></pre>
<p>package.json 文件的 dependencies 字段：</p>
<pre><code class="json">&quot;dependencies&quot;: {
    &quot;gulp&quot;: &quot;^3.9.1&quot;
}</code></pre>
<p><strong>-D, –save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它</strong></p>
<pre><code class="bash">npm install gulp --save-dev 或 npm install gulp -D

yarn add [package] [--dev/-D]</code></pre>
<p>package.json 文件的 devDependencies字段：</p>
<pre><code class="bash">&quot;devDependencies&quot;: {
    &quot;gulp&quot;: &quot;^3.9.1&quot;
}</code></pre>
]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>代码高亮插件</title>
    <url>/2020/03/21/js%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E6%8F%92%E4%BB%B6Prism/</url>
    <content><![CDATA[<h3 id="highlight-js"><a href="#highlight-js" class="headerlink" title="highlight.js"></a>highlight.js</h3><p><a href="https://highlightjs.org/" target="_blank" rel="noopener">官网</a></p>
<h3 id="prism"><a href="#prism" class="headerlink" title="prism"></a>prism</h3><p><a href="https://prismjs.com/index.html" target="_blank" rel="noopener">官网</a></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>git忽略文件及目录之.gitignore的使用</title>
    <url>/2020/03/21/Git/Git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h3 id="创建-gitignore文件"><a href="#创建-gitignore文件" class="headerlink" title="创建.gitignore文件"></a>创建.gitignore文件</h3><h4 id="使用git-bash"><a href="#使用git-bash" class="headerlink" title="使用git bash"></a>使用git bash</h4><ul>
<li>根目录下右键选择“Git Bash Here”进入bash命令窗口；</li>
<li>输入<code>vim .gitignore</code>命令，打开文件（没有文件会自动创建）；</li>
<li>按i键切换到编辑状态，输入规则，例如node_modules/，然后按Esc键退出编辑，输入:wq保存退出。</li>
</ul>
<h3 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h3><pre><code class="bash">/mtk/ 过滤整个文件夹
*.zip 过滤所有.zip文件
/mtk/do.c 过滤某个具体文件

!src/   不过滤该文件夹
!*.zip   不过滤所有.zip文件
!/mtk/do.c 不过滤该文件</code></pre>
<p>以上规则意思是：被过滤掉的文件就不会出现在你的GitHub库中了，当然本地库中还有，只是push的时候不会上传。</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap使用总结</title>
    <url>/2020/03/18/js%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/bootstrap%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="模态框"><a href="#模态框" class="headerlink" title="模态框"></a>模态框</h3><p><code>data-toggle=&quot;modal&quot;</code>  指定当前盒子具备的功能</p>
<p><code>data-target=&quot;#box1&quot;</code>指向模态框的名字</p>
<a id="more"></a>]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>echarts数据可视化</title>
    <url>/2020/03/14/js%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/echarts%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<h3 id="echarts数据可视化-图表-插件"><a href="#echarts数据可视化-图表-插件" class="headerlink" title="echarts数据可视化(图表)插件"></a>echarts数据可视化(图表)插件</h3><p><a href="https://www.echartsjs.com/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts" target="_blank" rel="noopener">中文官网教程</a></p>
<a id="more"></a>

<h4 id="引入echarts"><a href="#引入echarts" class="headerlink" title="引入echarts"></a>引入echarts</h4><hr>
<p>通过标签方式直接引入构建好的 echarts 文件</p>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;!-- 引入 ECharts 文件 --&gt;
    &lt;script src=&quot;echarts.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;/html&gt;</code></pre>
<h4 id="绘制一个简单的图表"><a href="#绘制一个简单的图表" class="headerlink" title="绘制一个简单的图表"></a>绘制一个简单的图表</h4><p>在绘图前我们需要为 ECharts 准备一个具备高宽的 DOM 容器。</p>
<pre><code class="html">&lt;body&gt;
    &lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;
    &lt;div id=&quot;main&quot; style=&quot;width: 600px;height:400px;&quot;&gt;&lt;/div&gt;
&lt;/body&gt;</code></pre>
<pre><code class="js">&lt;script type=&quot;text/javascript&quot;&gt;
    // 基于准备好的dom，初始化echarts实例
    var myChart = echarts.init(document.getElementById(&#39;main&#39;));

    // 指定图表的配置项和数据
    var option = {
        title: {
        text: &#39;ECharts 入门示例&#39;
        },
    tooltip: {},
    legend: {            //表格说明
        data:[&#39;销量&#39;]
    },
    xAxis: {            //x轴
        data: [&quot;衬衫&quot;,&quot;羊毛衫&quot;,&quot;雪纺衫&quot;,&quot;裤子&quot;,&quot;高跟鞋&quot;,&quot;袜子&quot;]
    },
    yAxis: {},            //y轴
    series: [{
        name: &#39;销量&#39;,
        type: &#39;bar&#39;, // bar 柱状图,line 折线图,pie 饼图
        data: [5, 20, 36, 10, 10, 20]
        }]
    };

    // 使用刚指定的配置项和数据显示图表。
    myChart.setOption(option);
&lt;/script&gt;</code></pre>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>js插件</tag>
      </tags>
  </entry>
  <entry>
    <title>表单和按钮的绑定</title>
    <url>/2020/03/14/Html/%E8%A1%A8%E5%8D%95%E5%92%8C%E6%8C%89%E9%92%AE%E7%9A%84%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h3 id="表单和按钮的绑定"><a href="#表单和按钮的绑定" class="headerlink" title="表单和按钮的绑定"></a>表单和按钮的绑定</h3><pre><code class="html">&lt;form form=&quot;myForm&quot;&gt;
    这是一个表单
&lt;/form&gt;
// 完成绑定
&lt;button form=&quot;myForm&quot;&gt;提交按钮&lt;/button&gt;</code></pre>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap_Paginator分页插件</title>
    <url>/2020/03/11/js%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/bootstrap-paginaterAPI%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h2 id="Bootstrap-PaginatorAPI文档"><a href="#Bootstrap-PaginatorAPI文档" class="headerlink" title="Bootstrap PaginatorAPI文档"></a>Bootstrap PaginatorAPI文档</h2><p>Bootstrap Paginator是一款基于Bootstrap的js分页插件，功能很丰富，个人觉得这款插件已经无可挑剔了。它提供了一系列的参数用来支持用户的定制，提供了公共的方法可随时获得插件状态的改变，以及事件来监听用户的动作。目前经过测试的浏览器包括： Firefox 5+, Chrome 14+, Safari 5+, Opera 11.6+ and IE 7+。</p>
<p>GitHub 官网地址：<a href="https://github.com/lyonlai/bootstrap-paginator" target="_blank" rel="noopener">https://github.com/lyonlai/bootstrap-paginator</a></p>
<a id="more"></a>

<p><strong>参数介绍：</strong></p>
<table>
<thead>
<tr>
<th><strong>参数名</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>默认值</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>bootstrapMajorVersion</td>
<td>number</td>
<td>2</td>
<td>搭配使用的Bootstrap版本，2.X 的 分页必须使用div元素，3.X分页的必须使用ul元素。请注意与所使用的bootstrap版本对应上。</td>
</tr>
<tr>
<td>size</td>
<td>string</td>
<td>“normal”</td>
<td>设置控件的显示大小，是个字符串. 允许的值: <em>mini</em>, <em>small</em>, <em>normal</em>,<em>large。</em>值：mini版的、小号的、正常的、大号的。</td>
</tr>
<tr>
<td>itemContainerClass</td>
<td>function</td>
<td></td>
<td>该参数接收一个函数，返回一个字符串，该字符串是一个我们自定义的class类样式。当控件内的每个操纵按钮被渲染(render)时，都会调用该函数，同时把有关该按钮的信息作为参数传入。参数：<strong>type</strong>,<strong>page</strong>, <strong>current</strong> 。<strong>type</strong>为该控件的操作按钮的类型，如上图所示的五种类型：first、prev、page、next、last。<strong>page</strong>为该按钮所属第几页。<strong>current</strong> 指示整个控件的当前页是第几页。</td>
</tr>
<tr>
<td>currentPage</td>
<td>number</td>
<td>1</td>
<td>设置当前页.</td>
</tr>
<tr>
<td>numberOfPages</td>
<td>number</td>
<td>5</td>
<td>设置控件显示的页码数.即：类型为”page”的操作按钮的数量。</td>
</tr>
<tr>
<td>totalPages</td>
<td>number</td>
<td>1</td>
<td>设置总页数.</td>
</tr>
<tr>
<td>pageUrl</td>
<td>function</td>
<td></td>
<td>实际上，控件内的每个操作按钮最终会被渲染成超链接，该参数的作用就是设置超链接的链接地址。该参数是个函数，参数为：<strong>type</strong>,<strong>page</strong>, <strong>current。</strong>这样我们就可以通过这个函数为每个操作按钮动态设置链接地址。如：”<a href="http://example.com/list/page/&quot;+page" target="_blank" rel="noopener">http://example.com/list/page/&quot;+page</a></td>
</tr>
<tr>
<td>shouldShowPage</td>
<td>boolean/function</td>
<td>true</td>
<td>该参数用于设置某个操作按钮是否显示，可是个布尔值也可是个函数。当为true时，显示。当为false时，不显示。如果该参数是个函数，需要返回个布尔值，通过这个返回值判断是否显示。函数有3个参数: <strong>type</strong>, <strong>page</strong>, <strong>current。</strong>使用函数的好处是，可以对每个操作按钮进行显示控制。</td>
</tr>
<tr>
<td>itemTexts</td>
<td>function</td>
<td></td>
<td>控制每个操作按钮的显示文字。是个函数，有3个参数: <strong>type</strong>, <strong>page</strong>, <strong>current。</strong>通过这个参数我们就可以将操作按钮上的英文改为中文，如first–&gt;首页，last–&gt;尾页。</td>
</tr>
<tr>
<td>tooltipTitles</td>
<td>function</td>
<td></td>
<td>设置操作按钮的title属性。是个函数，有3个参数: <strong>type</strong>, <strong>page</strong>, <strong>current。</strong></td>
</tr>
<tr>
<td>useBootstrapTooltip</td>
<td>boolean</td>
<td>false</td>
<td>设置是否使用Bootstrap内置的tooltip。 true是使用，false是不使用,默认是不使用。注意：如果使用，则需要引入bootstrap-tooltip.js插件。</td>
</tr>
<tr>
<td>bootstrapTooltipOptions</td>
<td>object</td>
<td></td>
<td>Default:    {        animation: true,        html: true,        placement: ‘top’,        selector: false,        title: “”,        container: false }该参数是个js对象。当参数useBootstrapTooltip为true时，会将该对象传给Bootstrap的bootstrap-tooltip.js插件。</td>
</tr>
<tr>
<td>onPageClicked</td>
<td>function</td>
<td></td>
<td>为操作按钮绑定click事件。回调函数的参数：<strong>event</strong>, <strong>originalEvent</strong>, <strong>type</strong>,<strong>page。</strong></td>
</tr>
<tr>
<td>onPageChanged</td>
<td>function</td>
<td></td>
<td>为操作按钮绑定页码改变事件，回调函数的参数：<strong>event</strong>, <strong>oldPage</strong>, <strong>newPage。</strong></td>
</tr>
</tbody></table>
<p><strong>公共命令：</strong></p>
<p>另外该插件还提供了几个公共的命令，可以通过如下方法调用，如：$(‘.example’).bootstrapPaginator(“show”,3) 调用show命令$(‘.example’).bootstrapPaginator(“getPages”) 调用getPages命令。</p>
<table>
<thead>
<tr>
<th><strong>命令名</strong></th>
<th><strong>参数</strong></th>
<th><strong>返回值</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>show</td>
<td>page</td>
<td></td>
<td><strong>show</strong>命令用于直接跳转到特定的page，与直接点击操作按钮的效果是一样的。使用方法，如：$(‘#example’).bootstrapPaginator(“show”,3) 直接跳转到第3页，$(‘#example’).bootstrapPaginator(“show”,100)直接跳转到100页。</td>
</tr>
<tr>
<td>showFirst</td>
<td></td>
<td></td>
<td><strong>showFirst</strong> 命令用于直接跳转到首页，与点击first按钮相同。使用方法：$(‘#example’).bootstrapPaginator(“showFirst”)</td>
</tr>
<tr>
<td>showPrevious</td>
<td></td>
<td></td>
<td><strong>showPrevious</strong> 命令用于直接跳转到上一页。使用方法：$(‘#example’).bootstrapPaginator(“showPrevious”)</td>
</tr>
<tr>
<td>showNext</td>
<td></td>
<td></td>
<td><strong>showNext</strong>命令用于直接跳转到下一页。</td>
</tr>
<tr>
<td>showLast</td>
<td></td>
<td></td>
<td><strong>showLast</strong> 命令用于直接跳转到上一页。</td>
</tr>
<tr>
<td>getPages</td>
<td></td>
<td><em>object</em></td>
<td><strong>getPages</strong>命令用于返回当前控件中显示的页码，以数组形式返回。使用方法：var arra = $(‘#example’).bootstrapPaginator(“getPages”)</td>
</tr>
<tr>
<td>setOptions</td>
<td><em>object</em></td>
<td></td>
<td><strong>setOptions</strong> 命令用于重新设置参数，使用方法：$(‘#example’).bootstrapPaginator(“setOptions”,newoptions)</td>
</tr>
</tbody></table>
<p><strong>事件Events：</strong></p>
<p>Bootstrap Paginator 提供了俩个事件：<em>page-clicked</em>和<em>page-changed</em>。这俩个事件作为参数使用，分别对应<em>onPageClicked</em>和<em>onPageChanged</em>。</p>
<table>
<thead>
<tr>
<th><strong>事件名</strong></th>
<th><strong>回调函数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>page-clicked</td>
<td>function(<em>event</em>, <em>originalEvent</em>, <em>type</em>, <em>page</em>)</td>
<td>同上文。另外，参数<em>event</em>, <em>originalEvent是俩个jquery事件对象，可参考jquery相关文档</em></td>
</tr>
<tr>
<td>page-changed</td>
<td>function(<em>event</em>, <em>oldPage</em>, <em>newPage</em>)</td>
<td>同上文</td>
</tr>
</tbody></table>
<p><strong>Demo 示例：</strong></p>
<p>1-引包</p>
<pre><code class="js">    &lt;script src=&quot;./lib/jquery/jquery.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;./lib/bootstrap-validator/js/bootstrapValidator.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;./lib/bootstrap-paginator/bootstrap-paginator.min.js&quot;&gt;&lt;/script&gt;</code></pre>
<p>2-准备一个分页父容器：</p>
<blockquote>
<p>搭配使用的Bootstrap版本，2.X 的 分页必须使用div元素，3.X分页的必须使用ul元素。请注意与所使用的bootstrap版本对应上。</p>
</blockquote>
<pre><code class="html">    &lt;ul id=&quot;paginator&quot;&gt;&lt;/ul&gt;</code></pre>
<p>3-初始化分页插件</p>
<pre><code class="js">$(&quot;#paginator&quot;).bootstrapPaginator({
      bootstrapMajorVersion:3,//默认是2，如果是bootstrap3版本，这个参数必填
      currentPage:1,//当前页
      totalPages:10,//总页数
      size:&quot;small&quot;,//设置控件的大小，mini, small, normal,large
      onPageClicked:function(event, originalEvent, type,page){
        //为按钮绑定点击事件 page:当前点击的按钮值
      }

});</code></pre>
<p>注意：分页样式用BootStrap 的，如果单独使用，请去BootStrap中把分页样式拷出来。jQuery版本需要1.8及以上。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>centos升级git</title>
    <url>/2020/03/03/Linux/centos%E5%8D%87%E7%BA%A7git/</url>
    <content><![CDATA[<h2 id="centos7编译安装最新版git"><a href="#centos7编译安装最新版git" class="headerlink" title="centos7编译安装最新版git"></a>centos7编译安装最新版git</h2><p><a href="https://learnku.com/articles/30501" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>cygwin安装教程</title>
    <url>/2020/03/03/Linux/cygwin%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="cygwin"><a href="#cygwin" class="headerlink" title="cygwin"></a>cygwin</h2><p>参考链接:</p>
<p><a href="https://www.linuxidc.com/Linux/2019-02/156968.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2019-02/156968.htm</a></p>
<p><a href="https://www.cnblogs.com/lsdb/p/8075178.html" target="_blank" rel="noopener">https://www.cnblogs.com/lsdb/p/8075178.html</a></p>
<p>缺少组件:</p>
<p>alternatives-1.3.30c-10<br>hostname-3.13-1<br>ipc-utils-1.0-2<br>which-2.20-2</p>
<h3 id="将Cygwin添加到Path"><a href="#将Cygwin添加到Path" class="headerlink" title="将Cygwin添加到Path"></a><a href="https://github.com/cmderdev/cmder/wiki/Integrating-Cygwin#Add-Cygwin-to-Path" target="_blank" rel="noopener">将Cygwin添加到Path</a></h3><p><a href="https://naizi.moe/2019/10/19/cmder-with-cygwin-github/#折腾" target="_blank" rel="noopener">https://naizi.moe/2019/10/19/cmder-with-cygwin-github/#%E6%8A%98%E8%85%BE</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>remote-ssh的使用过程</title>
    <url>/2020/03/03/Vscode/remote-ssh%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="remote-ssh"><a href="#remote-ssh" class="headerlink" title="remote-ssh"></a>remote-ssh</h2><p>首先在vscode下载remote-ssh相关插件</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h3><p><a href="https://xirikm.net/2019/619-1" target="_blank" rel="noopener">VSCode 配置 Remote-SSH 远程开发</a></p>
<a id="more"></a>

<h3 id="在服务器上安装公钥"><a href="#在服务器上安装公钥" class="headerlink" title="在服务器上安装公钥"></a>在服务器上安装公钥</h3><p>键入以下命令，在服务器上安装公钥：</p>
<pre><code class="bash">cd .ssh
cat id_rsa.pub &gt;&gt; authorized_keys</code></pre>
<h3 id="配置SSH密钥登陆"><a href="#配置SSH密钥登陆" class="headerlink" title="配置SSH密钥登陆"></a>配置SSH密钥登陆</h3><p>用户目录下的 <code>.ssh</code> 文件夹内的 id_rsa 和 id_rsa.pub 两个文件,分别对应为私钥和公钥。将 id_rsa.pub 文件中的内容复制到你远程主机用户目录下 .ssh 文件夹内名为 authorized_keys 的文件中即可。</p>
<p>或者将id_rsa.pub复制到.ssh目录下,然后执行</p>
<pre><code class="bash">cat id_rsa.pub &gt;&gt; authorized_keys</code></pre>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ul>
<li><p>用<code>ssh-keygen</code>生成密钥的时候,如果本地已经存在id_rsa,id_rsa.pub 文件,可以直接使用.</p>
</li>
<li><p>如果服务器不支持密钥登陆,则需要开启.参考链接:<a href="https://hyjk2000.github.io/2012/03/16/how-to-set-up-ssh-keys/" target="_blank" rel="noopener">设置SSH通过密钥登陆</a></p>
<pre><code class="bash">vim /etc/ssh/sshd_config
#修改如下内容
RSAAuthentication yes
PubkeyAuthentication yes</code></pre>
</li>
<li><p>完成以上操作后,使用root用户可以正常登陆,但是用普通用户登陆仍然要输入密码</p>
<p><strong>这里的原因是.ssh目录与authorized_keys文件的权限不能太大,像766这种肯定是无法登陆的.</strong></p>
<p><strong>于是我对照root用户下的权限,改成了700,测试发现可以登陆了</strong></p>
<p>注意: .ssh目录权限改为700,authorized_keys 权限改为600</p>
</li>
</ul>
<h3 id="etc-ssh-sshd-config配置"><a href="#etc-ssh-sshd-config配置" class="headerlink" title="/etc/ssh/sshd_config配置"></a>/etc/ssh/sshd_config配置</h3><pre><code>PasswordAuthentication no    #禁用密码登陆</code></pre>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>linux新建用户</title>
    <url>/2020/03/03/Linux/linux%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<blockquote>
<p>起因:</p>
<p>想远程通过remote ssh远程连接服务器,写代码,保存在服务器上运行,而不用本地运行.而通过root用户登陆不太好,所以需要创建一个用户,并设置好权限.</p>
</blockquote>
<p>创建用户前,我们需要了解一下<a href="https://blog.csdn.net/yue7603835/article/details/73699258" target="_blank" rel="noopener">linux的用户和用户组以及权限的概念</a>.</p>
<h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a><a href="https://blog.csdn.net/beitiandijun/article/details/41678251" target="_blank" rel="noopener">新建用户</a></h2><h3 id="adduser命令"><a href="#adduser命令" class="headerlink" title="adduser命令"></a>adduser命令</h3><p>会自动为创建的用户指定主目录、系统shell版本，会在创建时输入用户密码。</p>
<pre><code class="bash">adduser apple</code></pre>
<p>这样在创建用户名时，就创建了用户的主目录(/home/apple)以及密码。</p>
<p>默认情况下：</p>
<p>adduser在创建用户时会主动调用  /etc/adduser.conf；</p>
<p>在创建用户主目录时默认在/home下，而且创建为 /home/用户名</p>
<h3 id="useradd命令"><a href="#useradd命令" class="headerlink" title="useradd命令"></a>useradd命令</h3><p>需要使用参数选项指定上述基本设置，如果不使用任何参数，则创建的用户无密码、无主目录、没有指定shell版本。</p>
<pre><code class="bash">useradd tt</code></pre>
<pre><code class="bash">useradd
Usage: useradd [options] LOGIN
       useradd -D
       useradd -D [options]

Options:
  -b, --base-dir BASE_DIR       base directory for the home directory of the
                                new account
                                #为新用户指定home目录
  -c, --comment COMMENT         GECOS field of the new account
  #加上备注文字。备注文字会保存在passwd的备注栏位中；
  -d, --home-dir HOME_DIR       home directory of the new account
  #指定用户登入时的启始目录；
  -D, --defaults                print or change default useradd configuration
  -e, --expiredate EXPIRE_DATE  expiration date of the new account
  -f, --inactive INACTIVE       password inactivity period of the new account
  -g, --gid GROUP               name or ID of the primary group of the new
                                account
  -G, --groups GROUPS           list of supplementary groups of the new
                                account
  -h, --help                    display this help message and exit
  -k, --skel SKEL_DIR           use this alternative skeleton directory
  -K, --key KEY=VALUE           override /etc/login.defs defaults
  -l, --no-log-init             do not add the user to the lastlog and
                                faillog databases
                                #不要将用户添加到lastlog和faillog数据库
  -m, --create-home             create the user&#39;s home directory
                                  #自动建立用户的登入目录
  -M, --no-create-home          do not create the user&#39;s home directory
  -N, --no-user-group           do not create a group with the same name as
                                the user
  -o, --non-unique              allow to create users with duplicate
                                (non-unique) UID
  -p, --password PASSWORD       encrypted password of the new 
                                  #新帐号的密码
  -r, --system                  create a system account
                                  #建立系统帐号
  -R, --root CHROOT_DIR         directory to chroot into

  -s, --shell SHELL             login shell of the new account
                                  #指定用户登入后所使用的shell
  -u, --uid UID                 user ID of the new account
                                  #指定用户id
  -U, --user-group              create a group with the same name as the user
  -Z, --selinux-user SEUSER     use a specific SEUSER for the SELinux user mapping</code></pre>
<p><a href="https://www.cnblogs.com/52php/p/5677628.html" target="_blank" rel="noopener">参考链接</a></p>
<h2 id="深入理解-sudo-与-su-之间的区别"><a href="#深入理解-sudo-与-su-之间的区别" class="headerlink" title="深入理解 sudo 与 su 之间的区别"></a>深入理解 sudo 与 su 之间的区别</h2><p>两个命令的最大区别是：</p>
<p><code>sudo</code>命令需要输入当前用户的密码,而<code>su</code>命令则需要输入root用户的密码.另外一个区别是其默认行为。sudo 命令只允许使用提升的权限运行单个命令，而 su 命令会启动一个新的 shell，同时允许使用 root 权限运行尽可能多的命令，直到明确退出登录。</p>
<h3 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a><a href="https://wangchujiang.com/linux-command/c/su.html" target="_blank" rel="noopener">su命令</a></h3><pre><code class="bash">su [options] [-] [USER [arg]...]

Change the effective user id and group id to that of USER.
A mere - implies -l.   If USER not given, assume root.

Options:
 -m, -p, --preserve-environment  do not reset environment variables 
                                  #变更身份时，不要变更环境变量；
 -g, --group &lt;group&gt;             specify the primary group
 -G, --supp-group &lt;group&gt;        specify a supplemental group

 -, -l, --login                  make the shell a login shell
 #改变身份时，也同时变更工作目录，以及HOME,SHELL,USER,logname。此外，也会变更PATH变量；
 -c, --command &lt;command&gt;         pass a single command to the shell with -c
#执行完指定的指令后，即恢复原来的身份；
 --session-command &lt;command&gt;     pass a single command to the shell with -c
                                 and do not create a new session
#执行完指定的指令后，即恢复原来的身份；并且不会创建一个新的会话
 -f, --fast                      pass -f to the shell (for csh or tcsh)
 -s, --shell &lt;shell&gt;             run shell if /etc/shells allows it

 -h, --help     display this help and exit
 -V, --version  output version information and exit</code></pre>
<h2 id="linux—user-and-group-用户和组的概念"><a href="#linux—user-and-group-用户和组的概念" class="headerlink" title="linux—user and group 用户和组的概念"></a><a href="https://blog.51cto.com/13438667/2061590" target="_blank" rel="noopener">linux—user and group 用户和组的概念</a></h2><p>Linux用户分为管理员和普通用户，普通用户又分为系统用户和自定义用户。可以查看/etc/passwd来查看。</p>
<pre><code class="bash">root:x:0:0:root:/root:/bin/bash
sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
www:x:1000:1000::/home/www:/bin/bash</code></pre>
<p>以<code>root:x:0:0:root:/root:/bin/bash</code> 为例</p>
<p><img src="https://pic1.zhimg.com/80/v2-83338ceda500e5ffc3bc56b9477da368_720w.jpg" alt=""></p>
<ul>
<li>login_name 注册名 root</li>
<li>passwd 口令   由于 passwd 不再保存密码信息，所以用 x 占位代表。</li>
<li>uid 用户标识号</li>
<li>gid 组标识号</li>
<li>users 注释性描述</li>
<li>home_directory 用户主目录     /home/www</li>
<li>shell 登陆shell  —&gt; /bin/bash</li>
</ul>
<h2 id="在linux中为用户设置root权限"><a href="#在linux中为用户设置root权限" class="headerlink" title="在linux中为用户设置root权限"></a><a href="https://linoxide.com/usr-mgmt/give-normal-user-root-privileges/" target="_blank" rel="noopener">在linux中为用户设置root权限</a></h2><h4 id="usermod命令"><a href="#usermod命令" class="headerlink" title="usermod命令"></a>usermod命令</h4><pre><code class="bash">Usage: usermod [options] LOGIN

Options:
  -c, --comment COMMENT         new value of the GECOS field
  -d, --home HOME_DIR           new home directory for the user account
  -e, --expiredate EXPIRE_DATE  set account expiration date to EXPIRE_DATE
  -f, --inactive INACTIVE       set password inactive after expiration
                                to INACTIVE
  -g, --gid GROUP               force use GROUP as new primary group
  #强制使用GROUP作为新的主要组
  -G, --groups GROUPS           new list of supplementary GROUPS
  -a, --append                  append the user to the supplemental GROUPS
                                mentioned by the -G option without removing
                                the user from other groups
  #将用户添加到-G选项提到的附加GROUPS上，而不将用户从其他组中删除
  -h, --help                    display this help message and exit
  -l, --login NEW_LOGIN         new value of the login name
  -L, --lock                    lock the user account
  -m, --move-home               move contents of the home directory to the
                                new location (use only with -d)
  -o, --non-unique              allow using duplicate (non-unique) UID
  -p, --password PASSWORD       use encrypted password for the new password
  -R, --root CHROOT_DIR         directory to chroot into
  -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files
  -s, --shell SHELL             new login shell for the user account
  -u, --uid UID                 new UID for the user account
  -U, --unlock                  unlock the user account
  -v, --add-subuids FIRST-LAST  add range of subordinate uids
  -V, --del-subuids FIRST-LAST  remove range of subordinate uids
  -w, --add-subgids FIRST-LAST  add range of subordinate gids
  -W, --del-subgids FIRST-LAST  remove range of subordinate gids
  -Z, --selinux-user SEUSER     new SELinux user mapping for the user account
</code></pre>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>模板引擎初接触之arttemplate</title>
    <url>/2020/03/03/js%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%B9%8Barttemplate%E5%88%9D%E6%8E%A5%E8%A7%A6/</url>
    <content><![CDATA[<h2 id="art-template官网"><a href="#art-template官网" class="headerlink" title="art-template官网"></a><a href="https://aui.github.io/art-template/zh-cn/" target="_blank" rel="noopener">art-template官网</a></h2><h2 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h2><pre><code class="js">success: function(response) {
    // 模板引擎渲染
    $(&quot;tbody&quot;).html(template(&quot;tmp&quot;, response));
}</code></pre>
<p>其中<strong><a href="https://www.jquery123.com/html/" target="_blank" rel="noopener">html()</a></strong>方法是jQuery中提供的,作用是获取集合中第一个匹配元素的HTML内容。</p>
<p>response是服务器返回的响应数据</p>
<a id="more"></a>

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>art-template 支持标准语法与原始语法。标准语法可以让模板易读写，而原始语法拥有强大的逻辑表达能力。</p>
<p>标准语法支持基本模板语法以及基本 JavaScript 表达式；原始语法支持任意 JavaScript 语句，这和 EJS 一样。</p>
<h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><pre><code class="html">{{if value}}
... 
{{/if}}

{{if $value.isDelete == 0}}     //如果$value.isDelete值为0,就使用按钮&quot;启用&quot;
&lt;button class=&quot;btn btn-success&quot; data-toggle=&quot;modal&quot; data-target=&quot;.modal-user&quot;&gt;启用&lt;/button&gt;
{{else}}    //否则就使用按钮&quot;禁用&quot;
&lt;button class=&quot;btn btn-danger&quot; data-toggle=&quot;modal&quot; data-target=&quot;.modal-user&quot;&gt;禁用&lt;/button&gt;
{{/if}}</code></pre>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><pre><code class="html">{{each target}}
    {{$index}} {{$value}}
{{/each}}</code></pre>
<ol>
<li><code>target</code> 支持 <code>array</code> 与 <code>object</code> 的迭代，其默认值为 <code>$data</code>。</li>
<li><code>$value</code> 与 <code>$index</code> 可以自定义：<code>each target val key</code>。</li>
</ol>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>http协议的学习</title>
    <url>/2020/03/01/Http/http%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="关于HTTP协议"><a href="#关于HTTP协议" class="headerlink" title="关于HTTP协议"></a><a href="https://www.cnblogs.com/ranyonsue/p/5984001.html" target="_blank" rel="noopener">关于HTTP协议</a></h2><h3 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h3><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>
<p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2964446-5a35e17f298a48e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2" alt=""></p>
<h3 id="HTTP-URL"><a href="#HTTP-URL" class="headerlink" title="HTTP-URL"></a>HTTP-URL</h3><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息</p>
<p>URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p>
<p><code>http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</code></p>
<p>从上面的URL可以看出，一个完整的URL包括以下几部分：</p>
<ol>
<li>协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符.</li>
<li>域名部分：该URL的域名部分为“<a href="http://www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用" target="_blank" rel="noopener">www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用</a></li>
<li>端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口.http默认端口80/tcp;https默认端口443/tcp 443/udp.参见<a href="https://blog.csdn.net/u014421556/article/details/51671353" target="_blank" rel="noopener">常见的默认端口</a></li>
<li>虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”</li>
<li>文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</li>
<li>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</li>
<li>参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</li>
</ol>
<h3 id="HTTP之请求消息Request"><a href="#HTTP之请求消息Request" class="headerlink" title="HTTP之请求消息Request"></a>HTTP之请求消息Request</h3><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式:</p>
<ul>
<li>请求行(request line)</li>
<li>请求头部(header)</li>
<li>空行</li>
<li>请求数据</li>
</ul>
<h2 id="B-S架构和C-S架构"><a href="#B-S架构和C-S架构" class="headerlink" title="B/S架构和C/S架构"></a>B/S架构和C/S架构</h2><p><a href="https://blog.csdn.net/tennysonsky/article/details/45062079" target="_blank" rel="noopener">参考链接</a></p>
<ul>
<li>B/S    客户端/服务器模式</li>
<li>C/S    浏览器/服务器模式</li>
</ul>
<h3 id="C-S架构"><a href="#C-S架构" class="headerlink" title="C/S架构"></a>C/S架构</h3><p><img src="https://img-blog.csdn.net/20150415173118535" alt="img"></p>
<p><img src="https://img-blog.csdn.net/20150415191106683" alt="img"></p>
<h3 id="B-S架构"><a href="#B-S架构" class="headerlink" title="B/S架构"></a>B/S架构</h3><p><img src="http%E4%BB%8B%E7%BB%8D.assets/image-20200604192512821.png" alt="image-20200604192512821"></p>
<h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p><strong><a href="https://zhuanlan.zhihu.com/p/38240894" target="_blank" rel="noopener">一次完整的HTTP请求过程</a></strong></p>
<img src="https://pic1.zhimg.com/80/v2-4a9996d1f96058dc50a49caa8ddb5b90_720w.jpg" alt="Http请求全过程" style="zoom:125%;" />



<p><strong><a href="">访问一个网页的全过程</a></strong></p>
<img src="https://img-blog.csdn.net/20180929162504523?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaWJvMTIzMDEyMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" style="zoom:125%;" />

<ul>
<li><p>DNS解析</p>
</li>
<li><p>发送TCP请求(三次握手)</p>
<ul>
<li>浏览器会选择一个大于1024的本机端口向目标IP地址的80端口发起TCP连接请求。经过标准的TCP握手流程，建立TCP连接。</li>
</ul>
</li>
<li><p>负载均衡</p>
<ul>
<li><p>什么叫负载均衡?</p>
<ul>
<li><p>当一台服务器无法支持大量的用户访问时，将用户分摊到两个或多个服务器上的方法叫负载均衡。</p>
</li>
<li><p>Nginx</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>浏览器渲染</p>
</li>
<li><p>网页静态资源加载(CDN)</p>
<p>CDN加速- 内容分发网络.依靠部署在各地的服务器,使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度。</p>
</li>
</ul>
<h2 id="在浏览器输入url访问网址的过程中发生了什么"><a href="#在浏览器输入url访问网址的过程中发生了什么" class="headerlink" title="在浏览器输入url访问网址的过程中发生了什么?-"></a>在浏览器输入url访问网址的过程中发生了什么?-</h2><ul>
<li>用户在浏览器中输入url后,浏览器会先对输入的地址进行解析,比如用的协议是<code>http</code>还是<code>https</code></li>
<li>之后根据域名进行ip的寻址<ul>
<li>寻址先从DNS缓存开始,比如host</li>
<li>host没有就访问dns服务器,一层一层向上,直至访问到根服务器(IPv4协议跟服务器全球13台)</li>
<li>寻找到对应的ip后服务器再把ip地址发送给客户端</li>
</ul>
</li>
<li>客户端拿到ip地址后向对应ip地址的服务器发起请求<ul>
<li>与服务器建立http连接(3次握手)<ul>
<li>SSL/TLS 4次握手交换信息(数字证书,3个随机数,加密通信协议)<ul>
<li>Client Hello    Server Hello</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>成功建立连接后服务器返回数据,浏览器进行渲染</li>
<li>渲染出页面</li>
</ul>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo为首页添加分类</title>
    <url>/2020/02/29/%E5%8D%9A%E5%AE%A2/hexo%E4%B8%BA%E9%A6%96%E9%A1%B5%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p><a href="https://github.com/ahonn/hexo-theme-even/wiki/%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2" target="_blank" rel="noopener"><span style="font-size:1.5em">hexo操作指南</span></a>    <a href="http://yearito.cn/posts/hexo-advanced-settings.html" target="_blank" rel="noopener"><span style="font-size:1.5em">hexo个性化设置</span></a></p>
<h3 id="添加菜单入口"><a href="#添加菜单入口" class="headerlink" title="添加菜单入口"></a>添加菜单入口</h3><p><img src="https://i.loli.net/2020/02/29/OLvdAZQnIblucsf.png" alt=""></p>
<p>就是添加像分类,归档这样的菜单入口</p>
<h4 id="1-首先新建一个自定义页面-以linux页为例"><a href="#1-首先新建一个自定义页面-以linux页为例" class="headerlink" title="1.首先新建一个自定义页面(以linux页为例)"></a>1.首先新建一个自定义页面(以linux页为例)</h4><pre><code class="bash">hexo new page linux</code></pre>
<h4 id="2-编辑生成的-about-index-md-文件，设置布局为-page"><a href="#2-编辑生成的-about-index-md-文件，设置布局为-page" class="headerlink" title="2.编辑生成的 about/index.md 文件，设置布局为 page:"></a>2.编辑生成的 <code>about/index.md</code> 文件，设置布局为 <code>page</code>:</h4><pre><code>title: linux
layout: page</code></pre><h4 id="3-修改themes-next-config-yml"><a href="#3-修改themes-next-config-yml" class="headerlink" title="3.修改themes\next_config.yml"></a>3.修改<code>themes\next_config.yml</code></h4><pre><code class="yml">  menu:
    home: / || home
+   top: /linux/ || signal
    tags: /tags/ || tags
    categories: /categories/ || th
    archives: /archives/ || archive
    about: /about/ || user</code></pre>
<p>并且在语言包中新增菜单中文<code>themes\next\languages\zh-CN.yml</code></p>
<pre><code class="yml">  menu:
    home: 首页
    archives: 归档
    categories: 分类
    tags: 标签
    about: 关于
+   linux: 每天一个linux命令</code></pre>
<p>这样这个菜单入口就生成了</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>lnmp环境搭建</title>
    <url>/2020/02/28/Linux/lnmp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="lnmp环境-Linux-Apache-MySQL-PHP"><a href="#lnmp环境-Linux-Apache-MySQL-PHP" class="headerlink" title="lnmp环境(Linux+Apache+MySQL+PHP)"></a>lnmp环境(Linux+Apache+MySQL+PHP)</h2><h3 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h3><h4 id="nginx的启动和停止"><a href="#nginx的启动和停止" class="headerlink" title="nginx的启动和停止"></a>nginx的启动和停止</h4><pre><code class="bash">start nginx
</code></pre>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux目录介绍及软件安装目录</title>
    <url>/2020/02/28/Linux/linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="linux软件安装目录"><a href="#linux软件安装目录" class="headerlink" title="linux软件安装目录"></a>linux软件安装目录</h2><p><a href="https://blog.csdn.net/aqxin/article/details/48324377" target="_blank" rel="noopener">参考链接</a></p>
<p>linux的软件安装目录也是有讲究的.</p>
<p><code>/user</code> : 系统级的目录,可以理解为 <code>C:/Windows/</code>，<code>/usr/lib</code>理解为<code>C:/Windows/System32</code>。</p>
<p><code>/usr/lib</code>：理解为<code>C:/Windows/System32</code>。</p>
<p><code>/usr/local</code>：用户级的程序目录，可以理解为<code>C:/Progrem Files/</code>。用户自己编译的软件默认会安装到这个目录下。</p>
<p><code>/opt</code>：用户级的程序目录，可以理解为<code>D:/Software</code>，opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接<code>rm -rf</code>掉即可。在硬盘容量不够时，也可将/opt单独挂载到其他磁盘上使用。</p>
<p>源码放哪里？<br><code>/usr/src</code>：系统级的源码目录。<br><code>/usr/local/src</code>：用户级的源码目录。</p>
<p><a href="http://www.linuxidc.com/Linux/2015-04/116032.htm" target="_blank" rel="noopener">Linux各个目录的作用及内容</a><br><a href="http://www.linuxidc.com/Linux/2013-01/77368.htm" target="_blank" rel="noopener">Linux 各目录及每个目录的详细介绍</a></p>
<h2 id="linux目录介绍"><a href="#linux目录介绍" class="headerlink" title="linux目录介绍`"></a>linux目录介绍`</h2><p><code>/bin</code>: 目录又称为二进制目录，包含了那些供系统管理员和普通用户使用的重要linux命令的二进制映像。该目录存放的内容包括各种可执行文件，还有某些可执行文件的符号连接。常用的命令有：cp、dmesg、kill、login、rm、ping、chomd、bash、cat、echo、ls、 mail、vi等。</p>
<p>/etc` : 系统管理和配置文件</p>
<p><code>/sbin</code> : 超级管理命令,这里存放的是系统管理员使用的管理程序</p>
<p><code>/usr/bin</code> : 众多的应用程序</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用cmder代替cmd</title>
    <url>/2020/02/26/%E6%90%9E%E6%9C%BA%E6%8A%98%E8%85%BE/win10%E4%BD%BF%E7%94%A8cmder%E4%BB%A3%E6%9B%BFcmd/</url>
    <content><![CDATA[<h2 id="cmder安装配置"><a href="#cmder安装配置" class="headerlink" title="cmder安装配置"></a>cmder安装配置</h2><a id="more"></a>

<p><a href="https://www.jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/" target="_blank" rel="noopener">参考链接</a>    <a href="https://www.jianshu.com/p/bfff2d49f670" target="_blank" rel="noopener">配置参考</a>    <a href="https://cmder.net/" target="_blank" rel="noopener">官网</a></p>
<p>mini版和full版的区别是full版集成了git for Windows,如果电脑已经装了Git,可以使用mini版</p>
<p>安装完成后</p>
<ol>
<li><p>把cmder加到环境变量</p>
<p>可以把<code>Cmder.exe</code>存放的目录添加到系统环境变量；加完之后,<code>Win+r</code>一下输入<code>cmder</code>,即可。</p>
</li>
<li><p>添加cmder到右键菜单</p>
<p>使用管理员权限打开cmd输入以下命令</p>
<pre><code class="bash">cmder.exe /REGISTER ALL</code></pre>
</li>
</ol>
]]></content>
      <tags>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入学习</title>
    <url>/2020/02/24/JavaScript/js%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a><a href="https://github.com/mqyqingfeng/Blog/issues/5" target="_blank" rel="noopener">变量对象</a></h2><p>当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。</p>
<p>对于每个执行上下文，都有三个重要属性：</p>
<ul>
<li>变量对象(Variable object，VO)</li>
<li>作用域链(Scope chain)</li>
<li>this</li>
</ul>
<h2 id="this的用法"><a href="#this的用法" class="headerlink" title="this的用法"></a>this的用法</h2><p>1.纯粹的函数调用</p>
<p>2.作为对象方法的调用</p>
<p>3.作为构造函数调用</p>
<p>4.apply调用</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript原型及原型链的学习</title>
    <url>/2020/02/22/JavaScript/js%E5%8E%9F%E5%9E%8B%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="JavaScript原型-prototype"><a href="#JavaScript原型-prototype" class="headerlink" title="JavaScript原型 prototype"></a>JavaScript原型 prototype</h2><p>阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html" target="_blank" rel="noopener">《undefined与null的区别》</a>:</p>
<blockquote>
<p>null表示”没有对象”,即此处不应该有值.</p>
<p>undefined表示”缺少值”,即此处应该有一个值,但是还没有定义.</p>
</blockquote>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>vim使用学习</title>
    <url>/2020/02/20/Linux/vim%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>Vim进入和退出命令</strong></p>
<ol>
<li>:w 保存文件但不<strong>退出</strong>vi.</li>
<li>:w file 将修改另外保存到file中，不<strong>退出</strong>vi.</li>
<li>:w! 强制保存，不推出vi.</li>
<li>:wq 保存文件并<strong>退出</strong>vi.</li>
<li>:wq! 强制保存文件，并<strong>退出</strong>vi.</li>
<li>:q 不保存文件，<strong>退出</strong>vi.</li>
<li>:q! 不保存文件，强制<strong>退出</strong>vi.</li>
<li>:e! 放弃所有修改，从上次保存文件开始再编辑</li>
</ol>
<a id="more"></a>

<p><img src="https://i.loli.net/2020/02/29/Lms4So3gw1ixyGW.png" alt=""></p>
<p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt=""></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云折腾</title>
    <url>/2020/02/20/%E6%90%9E%E6%9C%BA%E6%8A%98%E8%85%BE/%E7%BD%91%E6%98%93%E4%BA%91unblock/</url>
    <content><![CDATA[<p><a href="https://github.com/nondanee/UnblockNeteaseMusic" target="_blank" rel="noopener">github地址</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/80608174" target="_blank" rel="noopener">安装脚本地址</a>    <a href="https://desperadoj.com/17.html" target="_blank" rel="noopener">参考链接</a></p>
<p>准备工作,以下方法基于centos7</p>
<blockquote>
<p>1.安装nodejs</p>
<pre><code class="bash">#安装c/c++编译器
yum install -y gcc-c++ make
curl -sL https://rpm.nodesource.com/setup_12.x | sudo -E bash -
#安装nodejs
yum install nodejs -y
#安装pm2
npm install pm2 -g</code></pre>
</blockquote>
<p>期间遇到了一个问题:==yum安装软件竟然报错：rpmdb open failed==</p>
<p><a href="">解决办法</a></p>
<pre><code class="bash">#首先清除掉缓存，之后再重建就可以了
rm -f /var/lib/rpm/__db*
rpm --rebuilddb</code></pre>
<h3 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h3><p>下载 UnblockNeteaseMusic</p>
<pre><code class="bash">npx @nondanee/unblockneteasemusic</code></pre>
<p><a href="https://www.ruanyifeng.com/blog/2019/02/npx.html" target="_blank" rel="noopener"><strong>npx使用教程</strong></a></p>
]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>linux端开放失败的问题</title>
    <url>/2020/02/16/Linux/linux%E7%AB%AF%E5%8F%A3%E5%BC%80%E6%94%BE%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<a id="more"></a>

<h3 id="linux端口常用命令"><a href="#linux端口常用命令" class="headerlink" title="linux端口常用命令"></a>linux端口常用命令</h3><blockquote>
<pre><code class="bash">firewall-cmd --zone=public --add-port=8888/tcp --permanent    #开启端口
firewall-cmd --list-ports    #查看开放的端口
firewall-cmd --query-port=8888/tcp    #查看端口是否开启
lsof -i:8888    #查看端口占用
netstat -tunlp |grep 8888    #查看指定端口的进程情况</code></pre>
</blockquote>
<p>最后是怎么解决的呢…</p>
<p><code>reboot</code>重启下服务器就好了</p>
<p><a href="https://www.jianshu.com/p/cded5a53cb5f" target="_blank" rel="noopener">附宝塔面板端口修改教程</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>常见问题</tag>
      </tags>
  </entry>
  <entry>
    <title>namp学习</title>
    <url>/2020/02/16/Http/nmap%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="namp命令"><a href="#namp命令" class="headerlink" title="namp命令"></a>namp命令</h3><p>其基本功能有三个：</p>
<p>（1）是扫描主机端口，嗅探所提供的网络服务</p>
<p>（2）是探测一组主机是否在线</p>
<p>（3）还可以推断主机所用的操作系统，到达主机经过的路由，系统已开放端口的软件版本</p>
<a id="more"></a>

<p><strong>namp命令说明</strong></p>
<pre><code class="bash">$ nmap
Usage: nmap [Scan Type(s)] [Options] {target specification}
TARGET SPECIFICATION:
  Can pass hostnames, IP addresses, networks, etc.
  Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254
  -iL &lt;inputfilename&gt;: Input from list of hosts/networks
  -iR &lt;num hosts&gt;: Choose random targets
  --exclude &lt;host1[,host2][,host3],...&gt;: Exclude hosts/networks
  --excludefile &lt;exclude_file&gt;: Exclude list from file
HOST DISCOVERY:
  -sL: List Scan - simply list targets to scan
  -sn: Ping Scan - disable port scan
  -Pn: Treat all hosts as online -- skip host discovery
  -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports
  -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
  -PO[protocol list]: IP Protocol Ping
  -n/-R: Never do DNS resolution/Always resolve [default: sometimes]
  --dns-servers &lt;serv1[,serv2],...&gt;: Specify custom DNS servers
  --system-dns: Use OS&#39;s DNS resolver
  --traceroute: Trace hop path to each host
SCAN TECHNIQUES:
  -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
  -sU: UDP Scan
  -sN/sF/sX: TCP Null, FIN, and Xmas scans
  --scanflags &lt;flags&gt;: Customize TCP scan flags
  -sI &lt;zombie host[:probeport]&gt;: Idle scan
  -sY/sZ: SCTP INIT/COOKIE-ECHO scans
  -sO: IP protocol scan
  -b &lt;FTP relay host&gt;: FTP bounce scan
PORT SPECIFICATION AND SCAN ORDER:
# 端口说明和扫描顺序
  -p &lt;port ranges&gt;: Only scan specified ports #仅扫描特定端口
    Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9
  --exclude-ports &lt;port ranges&gt;: Exclude the specified ports from scanning
  -F: Fast mode - Scan fewer ports than the default scan
  -r: Scan ports consecutively - don&#39;t randomize
  --top-ports &lt;number&gt;: Scan &lt;number&gt; most common ports
  --port-ratio &lt;ratio&gt;: Scan ports more common than &lt;ratio&gt;
SERVICE/VERSION DETECTION:
  -sV: Probe open ports to determine service/version info
  --version-intensity &lt;level&gt;: Set from 0 (light) to 9 (try all probes)
  --version-light: Limit to most likely probes (intensity 2)
  --version-all: Try every single probe (intensity 9)
  --version-trace: Show detailed version scan activity (for debugging)
SCRIPT SCAN:
  -sC: equivalent to --script=default
  --script=&lt;Lua scripts&gt;: &lt;Lua scripts&gt; is a comma separated list of
           directories, script-files or script-categories
  --script-args=&lt;n1=v1,[n2=v2,...]&gt;: provide arguments to scripts
  --script-args-file=filename: provide NSE script args in a file
  --script-trace: Show all data sent and received
  --script-updatedb: Update the script database.
  --script-help=&lt;Lua scripts&gt;: Show help about scripts.
           &lt;Lua scripts&gt; is a comma-separated list of script-files or
           script-categories.
OS DETECTION:
#系统推测
  -O: Enable OS detection #启用操作系统检测
  --osscan-limit: Limit OS detection to promising targets
  --osscan-guess: Guess OS more aggressively
TIMING AND PERFORMANCE:
  Options which take &lt;time&gt; are in seconds, or append &#39;ms&#39; (milliseconds),
  &#39;s&#39; (seconds), &#39;m&#39; (minutes), or &#39;h&#39; (hours) to the value (e.g. 30m).
  -T&lt;0-5&gt;: Set timing template (higher is faster)
  --min-hostgroup/max-hostgroup &lt;size&gt;: Parallel host scan group sizes
  --min-parallelism/max-parallelism &lt;numprobes&gt;: Probe parallelization
  --min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout &lt;time&gt;: Specifies
      probe round trip time.
  --max-retries &lt;tries&gt;: Caps number of port scan probe retransmissions.
  --host-timeout &lt;time&gt;: Give up on target after this long
  --scan-delay/--max-scan-delay &lt;time&gt;: Adjust delay between probes
  --min-rate &lt;number&gt;: Send packets no slower than &lt;number&gt; per second
  --max-rate &lt;number&gt;: Send packets no faster than &lt;number&gt; per second
FIREWALL/IDS EVASION AND SPOOFING:
  -f; --mtu &lt;val&gt;: fragment packets (optionally w/given MTU)
  -D &lt;decoy1,decoy2[,ME],...&gt;: Cloak a scan with decoys
  -S &lt;IP_Address&gt;: Spoof source address
  -e &lt;iface&gt;: Use specified interface
  -g/--source-port &lt;portnum&gt;: Use given port number
  --proxies &lt;url1,[url2],...&gt;: Relay connections through HTTP/SOCKS4 proxies
  --data &lt;hex string&gt;: Append a custom payload to sent packets
  --data-string &lt;string&gt;: Append a custom ASCII string to sent packets
  --data-length &lt;num&gt;: Append random data to sent packets
  --ip-options &lt;options&gt;: Send packets with specified ip options
  --ttl &lt;val&gt;: Set IP time-to-live field
  --spoof-mac &lt;mac address/prefix/vendor name&gt;: Spoof your MAC address
  --badsum: Send packets with a bogus TCP/UDP/SCTP checksum
OUTPUT:
  -oN/-oX/-oS/-oG &lt;file&gt;: Output scan in normal, XML, s|&lt;rIpt kIddi3,
     and Grepable format, respectively, to the given filename.
  -oA &lt;basename&gt;: Output in the three major formats at once
  -v: Increase verbosity level (use -vv or more for greater effect)
  -d: Increase debugging level (use -dd or more for greater effect)
  --reason: Display the reason a port is in a particular state
  --open: Only show open (or possibly open) ports
  --packet-trace: Show all packets sent and received
  --iflist: Print host interfaces and routes (for debugging)
  --append-output: Append to rather than clobber specified output files
  --resume &lt;filename&gt;: Resume an aborted scan
  --stylesheet &lt;path/URL&gt;: XSL stylesheet to transform XML output to HTML
  --webxml: Reference stylesheet from Nmap.Org for more portable XML
  --no-stylesheet: Prevent associating of XSL stylesheet w/XML output
MISC:
  -6: Enable IPv6 scanning
  -A: Enable OS detection, version detection, script scanning, and traceroute
  --datadir &lt;dirname&gt;: Specify custom Nmap data file location
  --send-eth/--send-ip: Send using raw ethernet frames or IP packets
  --privileged: Assume that the user is fully privileged
  --unprivileged: Assume the user lacks raw socket privileges
  -V: Print version number #输出版本号
  -h: Print this help summary page.
EXAMPLES:
  nmap -v -A scanme.nmap.org
  nmap -v -sn 192.168.0.0/16 10.0.0.0/8
  nmap -v -iR 10000 -Pn -p 80
SEE THE MAN PAGE (https://nmap.org/book/man.html) FOR MORE OPTIONS AND EXAMPLES
</code></pre>
]]></content>
      <tags>
        <tag>http</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>css选择器总结</title>
    <url>/2020/02/15/CSS/css%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="css交集选择器-并集选择器-兄弟选择器"><a href="#css交集选择器-并集选择器-兄弟选择器" class="headerlink" title="css交集选择器,并集选择器,兄弟选择器"></a>css交集选择器,并集选择器,兄弟选择器</h2><p><a href="https://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="noopener"><span style="font-size:1.25em">参考链接</span>&gt;</a></p>
<h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><p>交集选择器,相交的部分就是要设置属性值的标签</p>
<pre><code class="css">p.para1 {color: red};</code></pre>
<p><strong>含义:类名为para的p标签文字颜色为红色</strong></p>
<h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><p>并集选择器就是同时操控多个元素,选择器之间用<code>,</code>相隔</p>
<pre><code class="css">h1,h2,h3 {color: red};
/*等效于*/
h1 {color:red};
h2 {color:red};
h3 {color:red};</code></pre>
<h3 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h3><p>相邻兄弟选择器（Adjacent sibling selector）可选择紧接在另一元素后的元素，且二者有相同父元素。</p>
<p>例如，如果要增加紧接在 <strong>h1 元素后出现的段落</strong>的上边距，可以这样写：</p>
<pre><code class="css">h1 + p {margin-top:50px;}</code></pre>
<p><strong>这个选择器读作：“选择紧接在 h1 元素后出现的段落，h1 和 p 元素拥有共同的父元素”。</strong></p>
<p><strong>注意:必须是紧接着的元素!!!</strong></p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>linux权限问题详解</title>
    <url>/2020/02/12/Linux/linux%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="ls-lh命令查看权限"><a href="#ls-lh命令查看权限" class="headerlink" title="ls -lh命令查看权限"></a>ls -lh命令查看权限</h2><p>首先在linux目录下通过<code>ls -lh</code>命令查看目录下所有文件的权限</p>
<pre><code class="bash">total 7.5M
drwxr-xr-x  5 root root 4.0K Aug 27 17:35 backup
drwxrwxrwx  3 root root 4.0K Jan 31 17:13 Recycle_bin
drwxr-xr-x 11 root root 4.0K Aug 29 09:26 server
drwxr-xr-x  3 root root 4.0K Nov 10 18:27 themes
-rw-r--r--  1 root root 7.5M Sep  5 08:57 wordpress-4.6.15.tar.gz
drwxrwxrwx  3 root root 4.0K Jan 31 17:13 wwwlogs
drwxrwxrw-  7 root root 4.0K Jan 31 17:13 wwwroot</code></pre>
<p><img src="https://img-blog.csdn.net/20170513152626838?watermark/2/text/aHR0cD" alt=""></p>
<p>其中rwx分别代表着read,write,eXecute</p>
<ul>
<li>r(Read，读取)：对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目录的权限。</li>
<li>w(Write,写入)：对文件而言，具有新增,修改,删除文件内容的权限；对目录来说，具有新建，删除，修改，移动目录内文件的权限。</li>
<li>x(eXecute，执行)：对文件而言，具有执行文件的权限；对目录了来说该用户具有进入目录的权限。</li>
</ul>
<ol>
<li>目录的只读访问不允许使用cd进入目录，必须要有执行的权限才能进入。</li>
<li>只有执行权限只能进入目录，不能看到目录下的内容，要想看到目录下的文件名和目录名，需要可读权限。</li>
<li>一个文件能不能被删除，主要看该文件所在的目录对用户是否具有写权限(<strong>即w权限</strong>)，如果目录对用户没有写权限，则该目录下的所有文件都不能被删除，文件所有者除外</li>
<li>目录的w位不设置，即使你拥有目录中某文件的w权限也不能写该文件</li>
</ol>
<p><img src="https://i.loli.net/2020/02/12/zOotH9qUC12ce5y.png" alt=""></p>
<p>在<code>-rwxr-xr-x 1 www   www   644 Jan 31 17:12 index.html</code>中</p>
<p>index.html文件属于www用户,www组;</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript:void(0)和javascript:;的用法</title>
    <url>/2020/02/11/JavaScript/javascriptvoid(0)%E5%92%8Cjavascript;%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/Qian123/p/5345697.html" target="_blank" rel="noopener"><h3>参考链接</h3></a></p>
<h2 id="javascript-void-0"><a href="#javascript-void-0" class="headerlink" title="javascript:void(0)"></a>javascript:void(0)</h2><p>我们经常会使用到 javascript:void(0) 这样的代码，那么在 JavaScript 中 javascript:void(0) 代表的是什么意思呢？</p>
<p>void 是 JavaScript 中非常重要的关键字，该操作符指定要计算一个表达式但是不返回值。</p>
<p>下面的代码创建了一个超级链接，当用户点击以后不会发生任何事。当用户点击链接时，void(0) 计算为 0，但在 JavaScript 上没有任何效果。</p>
<pre><code class="js">&lt;a href=&quot;javascript:void(0)&quot;&gt;单击此处什么也不会发生&lt;/a&gt;</code></pre>
<pre><code class="js">&lt;a href=&quot;javascript:void(document.form.submit())&quot;&gt;单此处提交表单&lt;/a&gt;</code></pre>
<p>其实我们可以这样用<code>&lt;a href=&quot;javascript:void(document.form.submit())&quot;&gt;</code>，这句话会进行一次submit操作。那什么情况下用void(0)比较多呢，无刷新，当然是Ajax了，看一下Ajax的web页面的话，一般都会看到有很多的void(0)，所以在使用void(0)之前,最好先想一想,这个页面是否需要整体刷新。</p>
<h2 id="标签中href-”javascript-”"><a href="#标签中href-”javascript-”" class="headerlink" title="标签中href=”javascript:;”"></a>标签中href=”javascript:;”</h2><p>这里的href=”javascript:;”，其中javascript:是伪协议，它可以让我们通过一个链接来调用javascript函数.而采用这个方式 javascript:;可以实现A标签的点击事件运行时，如果页面内容很多，有滚动条时，页面不会乱跳，用户体验更好。</p>
<p>javascript:是表示在触发&lt;a&gt;默认动作时，执行一段JavaScript代码，而 javascript:; 表示什么都不执行，这样点击&lt;a&gt;时就没有任何反应。</p>
<p>javascript:;表示这是一个空连接。点击之后没任何反应。<br>类似的是#，但是一个#点击之后页面很长的情况下会会滚到顶部；而javascript:;没这样的问题；</p>
<h2 id="href-”-”与href-”javascript-void-0-”的区别"><a href="#href-”-”与href-”javascript-void-0-”的区别" class="headerlink" title="href=”#”与href=”javascript:void(0)”的区别"></a>href=”#”与href=”javascript:void(0)”的区别</h2><p>在做页面时，如果想做一个链接点击后不做任何事情，或者响应点击而完成其他事情，可以设置其属性 href = “#”，但是，这样会有一个问题，就是当页面有滚动条时，点击后会返回到页面顶端，用户体验不好。 </p>
<p>目前有如下几种解决办法： </p>
<ol>
<li>点击链接后不做任何事情 </li>
</ol>
<pre><code class="js">1.&lt;a href=&quot;javascript:void(0);&quot; &gt;test&lt;/a&gt;   
2.&lt;a href=&quot;javascript:;&quot; &gt;test&lt;/a&gt;   
3.&lt;a href=&quot;####&quot; &gt;test&lt;/a&gt; //使用2个到4个#，见的大多是&quot;####&quot;，也有使用&quot;#all&quot;等其他的  </code></pre>
<ol start="2">
<li>点击链接后，响应用户自定义的点击事件 </li>
</ol>
<pre><code class="js">1.&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;doSomething()&quot;&gt;test&lt;/a&gt;   
2.&lt;a href=&quot;#&quot; onclick=&quot;doSomething();return false;&quot;&gt;什么问题都解决了,包括浏览器不兼容问题&lt;/a&gt; //或者直接使用href=&quot;&quot;   
3.&lt;a href=&quot;#&quot; onclick=&quot;alert();event.returnValue=false;&quot;&gt;test&lt;/a&gt;  </code></pre>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js事件委托</title>
    <url>/2020/02/08/JavaScript/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
    <content><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>事件委托，通俗地来讲，就是把一个元素响应事件（click、keydown……）的函数委托到另一个元素；</p>
<p>一般来讲，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，当事件响应到需要绑定的元素上时，会通过<strong>事件冒泡机制</strong>从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数。</p>
<p><img src="https://i.loli.net/2020/02/10/Pjci6mMzJOsFV7a.png" alt=""></p>
<p>我们可以在绑定事件的时候指定指是在哪个阶段触发事件，element.addEventListener(event, function, useCapture)，==useCapture默认为false==，即默认在冒泡阶段触发事件</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>比如有这样一个HTML片段</p>
<pre><code class="html">&lt;ul id=&quot;list&quot;&gt;
  &lt;li&gt;item 1&lt;/li&gt;
  &lt;li&gt;item 2&lt;/li&gt;
  &lt;li&gt;item 3&lt;/li&gt;
  ......
  &lt;li&gt;item n&lt;/li&gt;
&lt;/ul&gt;
// ...... 代表中间还有未知数个 li</code></pre>
<p>通过事件委托把li元素的事件代理委托到它的父级元素也就是ul上:</p>
<pre><code class="js">// 给父层元素绑定事件
document.getElementById(&#39;list&#39;).addEventListener(&#39;click&#39;, function (e) {
  // 兼容性处理
  var event = e || window.event;
  var target = event.target || event.srcElement;
  // 判断是否匹配目标元素
  if (target.nodeName.toLocaleLowerCase === &#39;li&#39;) {
    console.log(&#39;the content is: &#39;, target.innerHTML);
  }
});</code></pre>
<p><strong><code>Event.srcElement</code></strong> 是标准的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/target" target="_blank" rel="noopener"><code>Event.target</code></a> 属性的一个别名。它只对老版本的IE浏览器有效。目的是兼容老版本的IE。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ls命令</title>
    <url>/2020/02/06/Linux/ls%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Linux-ls命令"><a href="#Linux-ls命令" class="headerlink" title="Linux ls命令"></a>Linux ls命令</h2><p><strong>语法</strong></p>
<pre><code class="bash">ls [选项] [目录名]</code></pre>
<p><strong>常用参数</strong></p>
<p>-a, –all 列出目录下的所有文件，包括以 . 开头的隐含文件</p>
<p>-A 同-a，但不列出“.”(表示当前目录)和“..”(表示当前目录的父目录)。</p>
<p>-c 配合 -lt：根据 ctime 排序及显示 ctime (文件状态最后更改的时间)配合 -l：显示 ctime 但根据名称排序否则：根据 ctime 排序</p>
<p>-C 每栏由上至下列出项目</p>
<p>–color[=WHEN] 控制是否使用色彩分辨文件。WHEN 可以是’never’、’always’或’auto’其中之一</p>
<p>-d, –directory 将目录象文件一样显示，而不是显示其下的文件。</p>
<p>-D, –dired 产生适合 Emacs 的 dired 模式使用的结果</p>
<p>-f 对输出的文件不进行排序，-aU 选项生效，-lst 选项失效</p>
<p>-g 类似 -l,但不列出所有者</p>
<p>-G, –no-group 不列出任何有关组的信息</p>
<p>-h, –human-readable 以容易理解的格式列出文件大小 (例如 1K 234M 2G)</p>
<p>–si 类似 -h,但文件大小取 1000 的次方而不是 1024</p>
<p>-H, –dereference-command-line 使用命令列中的符号链接指示的真正目的地</p>
<p>–indicator-style=方式 指定在每个项目名称后加上指示符号&lt;方式&gt;：none (默认)，classify (-F)，file-type (-p)</p>
<p>-i, –inode 印出每个文件的 inode 号</p>
<p>-I, –ignore=样式 不印出任何符合 shell 万用字符&lt;样式&gt;的项目</p>
<p>-k 即 –block-size=1K,以 k 字节的形式表示文件的大小。</p>
<p>-l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来。</p>
<p>-L, –dereference 当显示符号链接的文件信息时，显示符号链接所指示的对象而并非符号链接本身的信息</p>
<p>-m 所有项目以逗号分隔，并填满整行行宽</p>
<p>-o 类似 -l,显示文件的除组信息外的详细信息。  </p>
<p>-r, –reverse 依相反次序排列</p>
<p>-R, –recursive 同时列出所有子目录层</p>
<h3 id="ls-lh命令"><a href="#ls-lh命令" class="headerlink" title="ls -lh命令"></a>ls -lh命令</h3><p>功能: 查看权限</p>
<pre><code class="bash">$ ls -lh
total 600K
drwxr-xr-x 1 qq862 197609    0 1月  18 17:37 node_modules/
-rw-r--r-- 1 qq862 197609  782 1月  18 17:34 package.json
-rw-r--r-- 1 qq862 197609 243K 1月  18 17:37 package-lock.json
drwxr-xr-x 1 qq862 197609    0 2月   3 17:01 public/
drwxr-xr-x 1 qq862 197609    0 11月 10 12:05 scaffolds/
drwxr-xr-x 1 qq862 197609    0 12月 13 20:57 source/
drwxr-xr-x 1 qq862 197609    0 11月 26 12:41 themes/</code></pre>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Cloudflare CDN服务加速和保护自己的网站</title>
    <url>/2020/02/03/%E5%8D%9A%E5%AE%A2/%E9%80%9A%E8%BF%87Cloudflare%20CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<a id="more"></a>

<p><a href="https://mp.weixin.qq.com/s/GZPPGsh5NrAnPfAMqOIrcQ" target="_blank" rel="noopener"><span style="font-size:1.5em">参考链接</span></a></p>
<blockquote>
<p>测试</p>
</blockquote>
<img src="https://i.loli.net/2020/02/03/6z8M5bhF3lxun4H.png" referrerpolicy="no-referrer">]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>scp命令</title>
    <url>/2020/02/01/Linux/scp%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Linux-scp命令"><a href="#Linux-scp命令" class="headerlink" title="Linux scp命令"></a>Linux scp命令</h2><p><strong>语法</strong></p>
<pre><code class="bash">$ scp
usage: scp [-346BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file]
           [-l limit] [-o ssh_option] [-P port] [-S program]
           [[user@]host1:]file1 [...] [[user@]host2:]file2</code></pre>
<h3 id="在Linux中安全传输文件的14个SCP命令示例"><a href="#在Linux中安全传输文件的14个SCP命令示例" class="headerlink" title="在Linux中安全传输文件的14个SCP命令示例"></a><a href="https://www.linuxtechi.com/scp-command-examples-in-linux/" target="_blank" rel="noopener">在Linux中安全传输文件的14个SCP命令示例</a></h3><p>例如:</p>
<pre><code class="bash">scp -P port local_file remote_username@remote_ip:remote_folder 
#-P port：注意是大写的P, port是指定数据传输用到的端口号</code></pre>
<p>实例:</p>
<pre><code class="bash">scp -P 50000 sga.txt cheng@***.***.**.**:/www/wwwroot/filelist/</code></pre>
<p><a href="https://www.runoob.com/linux/linux-comm-scp.html" target="_blank" rel="noopener"><span style="font-size:1.5rem">runoob教程</span></a></p>
<p>报错提示</p>
<pre><code class="bash">scp: /www/wwwroot/filelist//sga.txt: Permission denied</code></pre>
<p>上网查了才知道原来是由于没有该目录的操作权限，默认的是在/tmp有权限</p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>git bash,cmd等软件设置代理</title>
    <url>/2020/02/01/Git/git%20bash%E7%AD%89%E8%BD%AF%E4%BB%B6%E8%B5%B0%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="Git-bash-cmd设置临时代理"><a href="#Git-bash-cmd设置临时代理" class="headerlink" title="Git bash,cmd设置临时代理"></a>Git bash,cmd设置临时代理</h2><pre><code class="bash">环境：shadowsocks、windows
本地ss端口设置(这里1080)

cmd命令行:(不用socks5)(临时设置)(也可放置环境变量)
set http_proxy=http://127.0.0.1:7890
set https_proxy=http://127.0.0.1:7890

ps:一定要用cmd命令行，千万别用powershell !!!
简易测试命令：curl https://www.google.com（别用ping）</code></pre>
<p> <strong>上面命令的作用是设置环境变量，不用担心，这种环境变量只会持续到cmd窗口关闭，不是系统环境变量。</strong> </p>
<p>以git clone为例:</p>
<pre><code class="bash">#https方式
git clone https://github.com/siwadiya/Photo_Show.git 
#ssh
git clone git@github.com:siwadiya/Photo_Show.git</code></pre>
<h3 id="HTTPS全局代理"><a href="#HTTPS全局代理" class="headerlink" title="HTTPS全局代理"></a>HTTPS全局代理</h3><p>目前来看，设置代理后加速最明显的是 <code>HTTPS</code>， 为其设置代理的方式如下</p>
<p>打开 <code>git bash</code>，然后输入</p>
<pre><code class="bash">git config --global http.proxy &quot;http://127.0.0.1:7890&quot;
git config --global https.proxy &quot;https://127.0.0.1:7890&quot;</code></pre>
<p>这样设置之后，<code>git clone https://github.com/username/repo.git</code> 的速度基本能跑满带宽</p>
<p>但是，这种方式并不适用于 <code>git clone git@github.com:username/repo.git</code> (ssh方式通信)</p>
<h3 id="SSH代理"><a href="#SSH代理" class="headerlink" title="SSH代理"></a><a href="https://upupming.site/2019/05/09/git-ssh-socks-proxy/" target="_blank" rel="noopener">SSH代理</a></h3><p>在<code>~/.ssh/config</code>文件中添加以下</p>
<pre><code>  ProxyCommand connect -S 127.0.0.1:7891 %h %p</code></pre><h2 id="npm和yarn的源-代理设置"><a href="#npm和yarn的源-代理设置" class="headerlink" title="npm和yarn的源,代理设置"></a><a href="https://www.51noip.cn/2018/02/01/npm-yarn-proxy/" target="_blank" rel="noopener">npm和yarn的源,代理设置</a></h2>]]></content>
      <tags>
        <tag>git</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>Termux终端模拟器</title>
    <url>/2020/01/31/App/Termux/</url>
    <content><![CDATA[<a id="more"></a>

<p><a href="https://www.sqlsec.com/2018/05/termux.html" target="_blank" rel="noopener">Termux高级终端配置教程</a></p>
<h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><p>1.可以<code>pwd</code>命令查看当前运行的目录</p>
<pre><code class="bash">$ pwd
/data/data/com.termux/files/home  #这是默认目录</code></pre>
<p>Termux</p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora主题</title>
    <url>/2020/01/30/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE/Typora%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<a id="more"></a>

<p>Typora主题配置文件目录为<code>C:\Users\username\AppData\Roaming\Typora\themes</code></p>
<p>针对我个人最喜欢的Github主题进行修改.</p>
<p>1.将<strong><code>块引用</code></strong>的左边框设置为黑色,如下所示:</p>
<blockquote>
<p>这是一段引用</p>
</blockquote>
<p>修改的样式代码:</p>
<pre><code class="css">blockquote {
    /* border-left: 4px solid #dfe2e5; */
    border-left: 3px solid rgba(0, 0, 0, 0.84);
}</code></pre>
<blockquote>
<p>在修改了块引用之后,因为图片的清晰度问题,我再次修改主题.</p>
<p>是这样的,Typora在插入图片时图片会模糊,这时如果将图片缩放至80%,又会变得很清晰,于是我就想:能不能插入的图片默认设置缩放80%.</p>
</blockquote>
<p>在<a href="http://support.typora.io/Images/#resize-images" target="_blank" rel="noopener">官方文档</a>中发现这样一段话</p>
<blockquote>
<h2 id="对齐图像"><a href="#对齐图像" class="headerlink" title="对齐图像"></a>对齐图像</h2><p>目前，Typora不支持图像对齐。但是您可以使用HTML代码，例如<code>![img](src)</code>在导出的HTML或PDF中对齐图像。</p>
<p>同样，默认情况下，如果一个段落仅包含一个图像，则它将居中对齐。它由CSS控制，可以通过<a href="http://support.typora.io/Add-Custom-CSS/" target="_blank" rel="noopener">添加自定义CSS</a>进行更改：</p>
<pre><code class="css">p .md-image:only-child{
    width: auto;
    text-align: inherit;
}</code></pre>
<h2 id="调整图像大小"><a href="#调整图像大小" class="headerlink" title="调整图像大小"></a>调整图像大小</h2><p>有关详细信息，请参见此<a href="http://support.typora.io/Resize-Image/" target="_blank" rel="noopener">链接</a>。</p>
</blockquote>
<p>于是我在theme.css文件中添加了如下代码</p>
<pre><code class="css">p .md-image:only-child{
    zoom: 80%;
    text-align: inherit;
}</code></pre>
<p>图片的大小就默认缩放至80%了</p>
<p><strong><span style="color:red">注意:这里我用的是zoom属性,如果用width属性,图片还是不够清晰,具体原因以后再探究.</span></strong></p>
<hr>
<p>做完这些以后md文件转成html上传blog又发现了问题,博客页面上的图片是不会缩放的.</p>
<p>问题所在:</p>
<blockquote>
<p>修改zoom只是针对Typora的显示,但是网页端的显示是由Hexo渲染的,所以需要修改对应主题(我这里用的是Hexo next主题)的配置文件.可以参考<a href="https://siwadiya.github.io/2019/12/15/%E5%8D%9A%E5%AE%A2/next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/">next主题个性化设置一文</a>.</p>
</blockquote>
]]></content>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>surge规则</title>
    <url>/2020/01/30/Http/surge%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<blockquote>
<p> <em>Surge提供三种域名检索方式检索域名（DOMAIN）、检索域名后缀（DOMAIN-SUFFIX）和检索域名关键字（DOMAIN-KEYWORD）。<br>三种网络连接方式直接连接（DIRECT）、使用代理（Proxy）和阻断连接（REJECT）。<br>规则运作就是if…then…的结构，如果检索域名满足什么，则选择什么网络连接方式</em> </p>
</blockquote>
<a id="more"></a>

<p>例子:</p>
<blockquote>
<p>基于域名判断屏蔽（Reject）请求：<code>DOMAIN,ad.api.3g.youku.com,REJECT</code><br>基于域名后缀判断走代理（Proxy）：<code>DOMAIN-SUFFIX,amazon.com,Proxy</code><br>基于域名关键字判断走代理（Proxy）：<code>DOMAIN-KEYWORD,google,Proxy,force-remote-dns</code><br>基于域名后缀判断走直连（DIRECT）：<code>DOMAIN-SUFFIX,126.net,DIRECT</code><br>判断是否局域网，如果是走直连（DIRECT）:<code>IP-CIRD,IP-CIDR,192.168.0.0/16,DIREC</code><br>检索IP地址，国内选择直连:<code>GEOIP,CN,DIRECT</code><br>其他的走代理:<code>FINAL Proxy</code> </p>
</blockquote>
<p>目前Clash支持的规则类型如下：</p>
<ul>
<li>DOMAIN-SUFFIX：域名后缀匹配</li>
<li>DOMAIN：域名匹配</li>
<li>DOMAIN-KEYWORD：域名关键字匹配</li>
<li>IP-CIDR：IP段匹配</li>
<li>SRC-IP-CIDR：源IP段匹配</li>
<li>GEOIP：GEOIP数据库（国家代码）匹配</li>
<li>DST-PORT：目标端口匹配</li>
<li>SRC-PORT：源端口匹配</li>
<li>MATCH：全匹配（一般放在最后）</li>
</ul>
<h3 id="史上最详尽的Surge教程（分阶层）"><a href="#史上最详尽的Surge教程（分阶层）" class="headerlink" title="史上最详尽的Surge教程（分阶层）"></a><a href="https://medium.com/@Zaihuaone/%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%E5%B0%BD%E7%9A%84surge%E6%95%99%E7%A8%8B-%E5%88%86%E9%98%B6%E5%B1%82-1d10720779c7" target="_blank" rel="noopener">史上最详尽的Surge教程（分阶层）</a></h3><h3 id="中文文档"><a href="#中文文档" class="headerlink" title="中文文档"></a><a href="https://docs.cfw.lbyczf.com/contents/ui/profiles/rules.html" target="_blank" rel="noopener">中文文档</a></h3><h3 id="合理使用-REJECT-规则"><a href="#合理使用-REJECT-规则" class="headerlink" title="合理使用 REJECT 规则"></a>合理使用 REJECT 规则</h3><p> 规则中添加 REJECT，可以用来拦截隐私和广告请求，但是有些应用会无限制的尝试重新连接。 </p>
<pre><code class="yaml"># 运营商及声名狼藉网站劫持
- name: &quot;Hijacking&quot;
  type: select
  proxies:
    - &quot;REJECT&quot;
    - &quot;DIRECT&quot;</code></pre>
<p>REJECT可以拒绝网站发送的数据</p>
<h3 id="规则列表中的最后两项"><a href="#规则列表中的最后两项" class="headerlink" title="规则列表中的最后两项"></a>规则列表中的最后两项</h3><p>规则列表中只有必要的一些域名或 IP，大多数时候 Recent Requests 记录的 Policy 部分，能看到的是规则配置文件最后两项判断：</p>
<ul>
<li>DIRECT（GEOIP CN → DIRECT），域名判断结果如果是中国走直连；</li>
<li>Proxy（FINAL → Proxy），兜底规则，前面规则判断完还没明确的基于这条规则走代理。</li>
</ul>
<p>从这里也能看出规则表的自定义中，至少要保留最后一条「FINAL,Proxy」规则体系才是完整的，而倒数第二条国别判断可以根据你所在的国家进行修改。</p>
]]></content>
      <tags>
        <tag>http</tag>
        <tag>surge</tag>
      </tags>
  </entry>
  <entry>
    <title>将本地仓库推送到Github</title>
    <url>/2020/01/22/Git/%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%8E%A8%E9%80%81%E5%88%B0Github/</url>
    <content><![CDATA[<a id="more"></a>

<p><a href="https://help.github.com/cn/github/administering-a-repository/setting-repository-visibility" target="_blank" rel="noopener"><span style="font-size:1.75em">参考链接</span></a></p>
<h2 id="将本地仓库推送到Github的流程"><a href="#将本地仓库推送到Github的流程" class="headerlink" title="将本地仓库推送到Github的流程"></a>将本地仓库推送到Github的流程</h2><p>1.打开Git Bash,将当前目录更改为本地仓库</p>
<pre><code class="bash"># 新建一个目录，将其初始化为Git代码库
$ git init [project-name]</code></pre>
<p>2.在新的本地仓库中添加文件。 这会暂存它们用于第一次提交。 </p>
<pre><code class="bash">$ git add .
# Adds the files in the local repository and stages them for commit. 要取消暂存文件，请使用 &#39;git reset HEAD YOUR-FILE&#39;。</code></pre>
<p>3.提交暂存在本地仓库中的文件。 </p>
<pre><code class="bash">$ git commit -m &quot;First commit&quot;
# Commits the tracked changes and prepares them to be pushed to a remote repository. 要删除此提交并修改文件，请使用 &#39;git reset --soft HEAD~1&#39; 并再次提交和添加文件。</code></pre>
<p>4.在GitHub建立一个空的仓库,注意不要添加readme.md文件,防止后面报错!</p>
<p>5.在命令提示中，<a href="https://help.github.com/cn/articles/adding-a-remote" target="_blank" rel="noopener">添加远程仓库的 URL</a>（将在该 URL 推送本地仓库）。 </p>
<pre><code class="bash">$ git remote add origin [remote repository URL]
# Sets the new remote
$ git remote -v
# Verifies the new remote URL</code></pre>
<blockquote>
<p> 对应的如果远程分支创建错误可以使用<code>git remote rm</code>或<code>git remote remove</code>命令删除远程URL</p>
<pre><code class="git">$ git remote -v
# 查看当前远程
&gt; origin  https://github.com/OWNER/REPOSITORY.git (fetch)
&gt; origin  https://github.com/OWNER/REPOSITORY.git (push)
&gt; destination  https://github.com/FORKER/REPOSITORY.git (fetch)
&gt; destination  https://github.com/FORKER/REPOSITORY.git (push)

$ git remote rm destination
# 删除远程
$ git remote -v
# 验证其已删除
&gt; origin  https://github.com/OWNER/REPOSITORY.git (fetch)
&gt; origin  https://github.com/OWNER/REPOSITORY.git (push)</code></pre>
<p> <strong>注</strong>：<code>git remote rm</code> 不会从服务器中删除远程仓库。 它只是从本地仓库中删除远程及其引用。 </p>
<div style="background-color:#ffdce0">**注**：`git remote rm` 不会从服务器中删除远程仓库。 它只是从本地仓库中删除远程及其引用。</div>
</blockquote>
<p>6.推送更改(本地仓库中)到 GitHub。 </p>
<pre><code class="bash">$ git push origin master
# Pushes the changes in your local repository up to the remote repository you specified as the origin</code></pre>
<h3 id="Git常用命令-易百教程"><a href="#Git常用命令-易百教程" class="headerlink" title="Git常用命令-易百教程"></a><a href="https://www.yiibai.com/git/git_add.html" target="_blank" rel="noopener">Git常用命令-易百教程</a></h3>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery学习</title>
    <url>/2020/01/22/jQuery/JQuery%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="导入jQuery"><a href="#导入jQuery" class="headerlink" title="导入jQuery"></a>导入jQuery</h2><ol>
<li><p>官网下载jQuery文件</p>
</li>
<li><p>通过cdn导入jQuery</p>
<ul>
<li><p><strong><a href="https://code.jquery.com/" target="_blank" rel="noopener">官方cdn</a></strong></p>
<p><strong>jQuery 1.x:</strong></p>
<p><code>&lt;script   src=&quot;https://code.jquery.com/jquery-1.12.4.js&quot;   integrity=&quot;sha256-Qw82+bXyGq6MydymqBxNPYTaUXXq7c8v3CwiYwLLNXU=&quot;   crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</code></p>
</li>
<li><p><strong><a href="https://developers.google.com/speed/libraries#jquery" target="_blank" rel="noopener">Google cdn</a></strong></p>
<p><strong>3.x snippet:</strong></p>
<p><code>&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p>
<p><strong>2.x snippet:</strong></p>
<p><code>&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p>
<p><strong>1.x snippet:</strong></p>
<p><code>&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p>
</li>
<li><p><strong><a href="https://www.bootcdn.cn/jquery/" target="_blank" rel="noopener">Boot cdn</a></strong></p>
<p><strong>版本:1.12.4</strong></p>
<pre><code class="html">&lt;script src=&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.js&quot;&gt;&lt;/script&gt;</code></pre>
</li>
</ul>
</li>
</ol>
<h2 id="文档就绪事件"><a href="#文档就绪事件" class="headerlink" title="文档就绪事件"></a>文档就绪事件</h2><p>将 jQuery 函数位于一个 document ready 函数中： </p>
<p>这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码。</p>
<p>如果在文档没有完全加载之前就运行函数，操作可能失败。</p>
<pre><code class="js"> $(document).ready(function(){
   // 开始写 jQuery 代码...
 }); </code></pre>
<pre><code class="js"> $(function(){
   // 开始写 jQuery 代码...
 }); </code></pre>
<p>以上两种写法等效</p>
<p>JQuery语法:</p>
<article style="color:blue;font-weight:700">$("触发对象").触发条件(function () {<br>
    <div style="text-indent:2rem">$("要操作的对象,CSS选择符写法").要操作的方法(参数);</div>
})</article>

<p>例如:</p>
<article style="color:red;font-weight:700">$("#btn").click(function () {<br>
    <div style="text-indent:2rem">$(".container").append("divclass="box">1\div>");</div>
})</article>

<p>例如:</p>
<pre><code class="js">$(&quot;#btn&quot;).click(function () {
    $(&quot;.container&quot;).append(&quot;&lt;div class=\&quot;box\&quot;&gt;1&lt;/div&gt;&quot;);
})</code></pre>
<h3 id="jQuery-捕获"><a href="#jQuery-捕获" class="headerlink" title="jQuery 捕获"></a>jQuery 捕获</h3><h4 id="jQuery-DOM-操作"><a href="#jQuery-DOM-操作" class="headerlink" title="jQuery DOM 操作"></a>jQuery DOM 操作</h4><p><strong>text()</strong>类似于原生js的<strong>innerText</strong></p>
<p><strong>html()</strong>类似于原生js的<strong>innerHTML</strong></p>
<h4 id="获取属性-attr"><a href="#获取属性-attr" class="headerlink" title="获取属性 - attr()"></a>获取属性 - attr()</h4><p>jQuery attr() 方法用于获取属性值。</p>
<pre><code class="js">$(&quot;button&quot;).click(function(){
  alert($(&quot;#w3s&quot;).attr(&quot;href&quot;));
});</code></pre>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript/Http Status状态码</title>
    <url>/2020/01/20/JavaScript/Http%20Status%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>AJAX学习</title>
    <url>/2020/01/20/JavaScript/AJAX%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>AJAX即 “Asynchronous Javascript And XML “（异步JavaScript和XML）</p>
<p>AJAX 是一种用于创建快速动态网页的技术。</p>
<p>Ajax 的核心是 JavaScript 对象 XMLHttpRequest。</p>
<a id="more"></a>

<h2 id="AJAX工作原理"><a href="#AJAX工作原理" class="headerlink" title="AJAX工作原理"></a>AJAX工作原理</h2><p><img src="https://7n.w3cschool.cn/statics/images/course/ajax.gif" alt=""></p>
<h2 id="XHR的用法"><a href="#XHR的用法" class="headerlink" title="XHR的用法"></a>XHR的用法</h2><ul>
<li><p>创建xhr对象</p>
<pre><code class="js">var xhr = new XMLHttpRequest();</code></pre>
</li>
<li><p>设置请求头部信息</p>
<pre><code class="js">//请求行
xhr.open(&quot;get&quot;,&quot;&quot;)
//请求头
</code></pre>
</li>
<li><p>发送请求</p>
<pre><code class="js">xhr.send(null);</code></pre>
</li>
<li><p>接收服务器响应</p>
<pre><code class="js"></code></pre>
</li>
</ul>
<h3 id="创建XHR对象"><a href="#创建XHR对象" class="headerlink" title="创建XHR对象"></a>创建XHR对象</h3><h4 id="AJAX-创建-XMLHttpRequest-对象"><a href="#AJAX-创建-XMLHttpRequest-对象" class="headerlink" title="AJAX - 创建 XMLHttpRequest 对象"></a>AJAX - 创建 XMLHttpRequest 对象</h4><p> XMLHttpRequest 是 AJAX 的基础。 </p>
<p> XMLHttpRequest 术语缩写为XHR，中文可以解释为可扩展超文本传输请求。 </p>
<p>它执行以下操作：</p>
<ol>
<li><p>在后台从客户端发送数据</p>
</li>
<li><p>从服务器接收数据</p>
</li>
<li><p>更新网页而不重新加载。</p>
<p>为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject </p>
</li>
</ol>
<pre><code class="js">var xmlhttp;
if (window.XMLHttpRequest)
  {// code for IE7+, Firefox, Chrome, Opera, Safari
  xmlhttp=new XMLHttpRequest();
  }
else
  {// code for IE6, IE5
  xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);
  }</code></pre>
<h3 id="XHR-请求"><a href="#XHR-请求" class="headerlink" title="XHR 请求"></a>XHR 请求</h3><h4 id="AJAX工作步骤"><a href="#AJAX工作步骤" class="headerlink" title="AJAX工作步骤"></a>AJAX工作步骤</h4><hr>
<p>正如您在上面的示例中所看到的，XMLHttpRequest对象起着重要作用。</p>
<ol>
<li>用户从UI发送请求，JavaScript中调用XMLHttpRequest对象。</li>
<li>HTTP请求由XMLHttpRequest对象发送到服务器。</li>
<li>服务器使用JSP，PHP，Servlet，ASP.net等与数据库交互。</li>
<li>检索数据。</li>
<li>服务器将XML数据或JSON数据发送到XMLHttpRequest回调函数。</li>
<li>HTML和CSS数据显示在浏览器上。</li>
</ol>
<h5 id="发送请求至服务器"><a href="#发送请求至服务器" class="headerlink" title="发送请求至服务器"></a>发送请求至服务器</h5><hr>
<p> 如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的<code>open()</code>和<code>send()</code>方法： </p>
<pre><code class="js">xmlhttp.open(&quot;GET&quot;,&quot;ajax_info.txt&quot;,true);        
xmlhttp.send();</code></pre>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">open(<em>method</em>,<em>url</em>,<em>async</em>)</td>
<td align="left">规定请求的类型、URL 以及是否异步处理请求。<em>method</em>：请求的类型；GET 或 POST<em>url</em>：文件在服务器上的位置<em>async</em>：true（异步）或 false（同步）</td>
</tr>
<tr>
<td align="left">send(<em>string</em>)</td>
<td align="left">将请求发送到服务器。<em>string</em>：仅用于 POST 请求</td>
</tr>
</tbody></table>
<p>Async=true</p>
<hr>
<p> 当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数： </p>
<pre><code class="js">var xhr = new XMLHttpRequest();
// 发送请求...
xmlhttp.open(&quot;GET&quot;,&quot;ajax_info.txt&quot;,true);        
xmlhttp.send();

xhr.onreadystatechange = function() {
    //200（成功）  服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。
    if (xhr.readyState === 4 &amp;&amp; xhr.status === 20) {
        document.getElementById(&quot;view&quot;).innerHTML = xhr.responseText;
    }
};</code></pre>
<p>这里也可以使用<code>onload</code>事件</p>
<h4 id="onload和onreadystatechange"><a href="#onload和onreadystatechange" class="headerlink" title="onload和onreadystatechange"></a>onload和onreadystatechange</h4><p>IE不支持onload,只支持onreadystatechange</p>
<h3 id="XHR响应"><a href="#XHR响应" class="headerlink" title="XHR响应"></a>XHR响应</h3><h4 id="AJAX-服务器响应"><a href="#AJAX-服务器响应" class="headerlink" title="AJAX - 服务器响应"></a>AJAX - 服务器响应</h4><hr>
<ul>
<li><p><strong>状态行</strong><br><code>xhr.status</code>状态码，即<a href="https://blog.csdn.net/unclebober/article/details/86626117" target="_blank" rel="noopener">Http StatusCode</a>,如200，304，404等；</p>
</li>
<li><p><strong>响应主体</strong><br><code>xhr.responseText</code>与<code>xhr.responseXML</code>都表示响应主体。</p>
<p>如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的<code>responseText</code>或<code>responseXML</code>属性。 </p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">responseText</td>
<td align="left">获得字符串形式的响应数据。</td>
</tr>
<tr>
<td align="left">responseXML</td>
<td align="left">获得 XML 形式的响应数据。</td>
</tr>
</tbody></table>
<h5 id="responseText-属性"><a href="#responseText-属性" class="headerlink" title="responseText 属性"></a>responseText 属性</h5><pre><code class="js">document.getElementById(&quot;myDiv&quot;).innerHTML=xmlhttp.responseText;</code></pre>
<h5 id="responseXML-属性"><a href="#responseXML-属性" class="headerlink" title="responseXML 属性"></a>responseXML 属性</h5><p> 如果来自服务器的响应是 XML，需要对 XML 进行解析 </p>
<h3 id="XHR-readyState"><a href="#XHR-readyState" class="headerlink" title="XHR readyState"></a>XHR readyState</h3><h4 id="AJAX-onreadystatechange-事件"><a href="#AJAX-onreadystatechange-事件" class="headerlink" title="AJAX - onreadystatechange 事件"></a>AJAX - onreadystatechange 事件</h4><hr>
<p>当发送一个请求后,客户端需要确定这个请求什么时候完成,因此,XMLHttpRequest对象提供了 <code>onreadystatechange</code>事件机制来捕获请求的状态，继而实现响应 。</p>
<p> XMLHttpRequest 对象的三个重要的属性： </p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>onreadystatechange</code></td>
<td align="left">存储函数（或函数名），每当<code>readyState</code>属性改变时，就会调用该函数。</td>
</tr>
<tr>
<td align="left"><code>readyState</code></td>
<td align="left">存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。<br>0: 请求未初始化<br>1: 服务器连接已建立<br/>2: 请求已接收<br/>3: 请求处理中<br/>4: 请求已完成，且响应已就绪</td>
</tr>
<tr>
<td align="left"><code>status</code></td>
<td align="left">200: “OK” 404: 未找到页面</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Json的表示及序列化和反序列化</title>
    <url>/2020/01/19/JavaScript/Json/</url>
    <content><![CDATA[<h3 id="Json-JavaScript对象表示法"><a href="#Json-JavaScript对象表示法" class="headerlink" title="Json(JavaScript对象表示法)"></a>Json(JavaScript对象表示法)</h3><p>json的语法可以表示三种类型的值:</p>
<ul>
<li>简单值</li>
<li>对象</li>
<li>数组</li>
</ul>
<a id="more"></a>

<p>1.简单值</p>
<h4 id="json字符串和json对象"><a href="#json字符串和json对象" class="headerlink" title="json字符串和json对象"></a>json字符串和json对象</h4><pre><code class="json">//字符串对象格式
{
    &quot;name&quot;: &quot;JSON&quot;,
    &quot;address&quot;: &quot;北京市西城区&quot;,
    &quot;age&quot;: 25
}</code></pre>
<pre><code class="json">//数组对象格式
[
    {
        &quot;name&quot;: &quot;JSON&quot;,
        &quot;address&quot;: &quot;北京市西城区&quot;,
        &quot;age&quot;: 25
    },
    {
        &quot;name&quot;: &quot;JSON1&quot;,
        &quot;address&quot;: &quot;北京市东城区&quot;,
        &quot;age&quot;: 28
    }
]</code></pre>
<h3 id="JSON序列化和反序列化"><a href="#JSON序列化和反序列化" class="headerlink" title="JSON序列化和反序列化"></a>JSON序列化和反序列化</h3><blockquote>
<h4 id="首先要搞懂什么是序列化"><a href="#首先要搞懂什么是序列化" class="headerlink" title="首先要搞懂什么是序列化?."></a>首先要搞懂什么是序列化?.</h4></blockquote>
<p> 序列化（Serialization）是将对象的状态信息转换为可以存储或传输的形式的过程。</p>
<p><span style="color:red">以json为例,简而言之就是将JavaScript对象以json格式存储到到<code>*.json</code>文件中；同理反序列化就是将<code>.json</code>文件中的json对象转换为JavaScript对象。</span></p>
<h4 id="序列化——JSON-stringify"><a href="#序列化——JSON-stringify" class="headerlink" title="序列化——JSON.stringify()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">序列化——<em>JSON.stringify()</em></a></h4><pre><code class="js">var adress = {
    name: &quot;JSON&quot;,
    address: &quot;北京市西城区&quot;,
    age: 25
};
var result = JSON.stringify(adress, [&quot;name&quot;, &quot;age&quot;]);
console.log(result);
// 输出结果 {&quot;name&quot;:&quot;JSON&quot;,&quot;age&quot;:25}</code></pre>
<h4 id="反序列化——JSON-parse"><a href="#反序列化——JSON-parse" class="headerlink" title="反序列化——JSON.parse()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse" target="_blank" rel="noopener">反序列化——<em>JSON.parse()</em></a></h4><pre><code class="js">var adress1 = JSON.parse(result);
console.log(adress1.address);
//输出结果  北京市西城区</code></pre>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js事件</title>
    <url>/2020/01/19/JavaScript/js%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="HTML-DOM事件"><a href="#HTML-DOM事件" class="headerlink" title="HTML DOM事件"></a>HTML DOM事件</h3><p>json的语法可以表示三种类型的值:</p>
<ul>
<li>简单值</li>
<li>对象</li>
<li>数组</li>
</ul>
<a id="more"></a>

<p>1.简单值</p>
<p>表单事件</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/jsref/event-oninput.html" target="_blank" rel="noopener">oninput</a></td>
<td align="left">oninput 事件在用户输入时触发。<br />该事件在 &lt;input&gt; 或 &lt;textarea&gt; 元素的值发生改变时触发。<br /><strong>提示：</strong> 该事件类似于 <a href="https://www.runoob.com/jsref/event-onchange.html" target="_blank" rel="noopener">onchange</a> 事件。不同之处在于 oninput 事件在元素值发生变化是立即触发， onchange 在元素失去焦点时触发。另外一点不同是 onchange 事件也可以作用于&lt;keygen&gt; 和 <select> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/jsref/event-ondblclick.html" target="_blank" rel="noopener">ondblclick</a></td>
<td align="left">ondblclick 事件会在对象被双击时发生。</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>博客/hexo主题之next折腾记</title>
    <url>/2020/01/18/%E5%8D%9A%E5%AE%A2/hexo%E4%B8%BB%E9%A2%98%E4%B9%8Bnext%E6%8A%98%E8%85%BE%E8%AE%B0/</url>
    <content><![CDATA[<p>test</p>
]]></content>
  </entry>
  <entry>
    <title>DOM</title>
    <url>/2020/01/16/JavaScript/DOM/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>类型</th>
<th>document类型</th>
<th>element类型</th>
</tr>
</thead>
<tbody><tr>
<td>nodeType</td>
<td>9</td>
<td>1</td>
</tr>
<tr>
<td>nodeName</td>
<td>#document</td>
<td>元素的标签名</td>
</tr>
<tr>
<td>nodeValue</td>
<td>null</td>
<td>null</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/01/13/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener"><span style="font-size:1.5em">MDN</span></a></p>
<p> 正则表达式（regular expression）就是用一个“字符串”来描述一个特征，然后去验证另一个“字符串”是否符合这个特征。比如 表达式“ab+” 描述的特征是“一个 ‘a’ 和 任意个 ‘b’ ”，那么 ‘ab’, ‘abb’, ‘abbbbbbbbbb’ 都符合这个特征。 </p>
<table>
<thead>
<tr>
<th>字符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配前一项内容0或多次</td>
</tr>
<tr>
<td>?</td>
<td>匹配前一项内容0或1次</td>
</tr>
<tr>
<td>+</td>
<td>匹配前一项内容1或多次</td>
</tr>
<tr>
<td>[abc]</td>
<td>匹配任一字符: a 或 b 或 c</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>在js中两个方法创建正则表达式</p>
<p>1.字面量</p>
<pre><code class="js">var re = /ab+c/;</code></pre>
<p>2.构造函数</p>
<pre><code class="js">var re = new RegExp(&quot;ab+c&quot;);</code></pre>
<h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><table>
<thead>
<tr>
<th align="center">^</th>
<th>含义匹配输入法开始</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td>匹配输入的开始</td>
</tr>
<tr>
<td align="center">$</td>
<td>匹配输入的结束</td>
</tr>
<tr>
<td align="center">*</td>
<td>匹配前面一个表达式0次或多次.等价于{0,}</td>
</tr>
<tr>
<td align="center">+</td>
<td>匹配前面一个表达式1次或多次.等价于{1,}</td>
</tr>
<tr>
<td align="center">?</td>
<td>匹配前面一个表达式0次或1次.等价于{0,1}</td>
</tr>
<tr>
<td align="center">\d</td>
<td>匹配一个数字.等价于[0,9]</td>
</tr>
<tr>
<td align="center">\D</td>
<td>匹配非数字</td>
</tr>
<tr>
<td align="center">\w</td>
<td>匹配单字字符,大小写字母 a-z A-Z 数字0-9 _</td>
</tr>
<tr>
<td align="center">\W</td>
<td>匹配非单字字符</td>
</tr>
<tr>
<td align="center">{n}</td>
<td>匹配前一项n次,n是正整数</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
</tr>
</tbody></table>
<h3 id="正则表达式标志"><a href="#正则表达式标志" class="headerlink" title="正则表达式标志"></a>正则表达式标志</h3><table>
<thead>
<tr>
<th align="center">标志</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>g</code></td>
<td align="left">全局搜索。</td>
</tr>
<tr>
<td align="center"><code>i</code></td>
<td align="left">不区分大小写搜索。</td>
</tr>
<tr>
<td align="center"><code>m</code></td>
<td align="left">多行搜索。</td>
</tr>
<tr>
<td align="center"><code>s</code></td>
<td align="left">允许 <code>.</code> 匹配换行符。</td>
</tr>
<tr>
<td align="center"><code>u</code></td>
<td align="left">使用unicode码的模式进行匹配。</td>
</tr>
<tr>
<td align="center"><code>y</code></td>
<td align="left">执行“粘性”搜索,匹配从目标字符串的当前位置开始，可以使用y标志。</td>
</tr>
</tbody></table>
<p><strong>语法</strong></p>
<pre><code class="js">var re = /pattern/flags; //字面量</code></pre>
<p>或</p>
<pre><code class="js">var re = new RegExp(&quot;parttern&quot;,&quot;flags&quot;); //构造函数</code></pre>
<p>正则工具<a href="https://www.baidufe.com/fehelper/index/index.html" target="_blank" rel="noopener">FeHelper</a></p>
]]></content>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode snippet设置</title>
    <url>/2020/01/09/Vscode/vscode%20snippet%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><a href="https://juejin.im/post/5d0496415188257fff23b077" target="_blank" rel="noopener">参考链接</a></h3><p>起因是这样的</p>
<blockquote>
<p>我在写js的时候输入for会有智能提示(js snippet插件的)</p>
<pre><code class="js">for (let index = 0; index &lt; array.length; index++) {
    const element = array[index];

}</code></pre>
<p>但我目前只是刚接触js,所以想让他的效果是这样的</p>
<pre><code class="js">for ( i = 0; i &lt; array.length; i++) {

}</code></pre>
<p>于是上网查询了下,发现可以通过配置vscode内置的snippet来完成这一效果</p>
</blockquote>
<a id="more"></a>

<h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><p>首先打开snippet的配置文件,每个格式都会有一个,形如<code>$language.json</code>的配置,我要配置的是js的,所以打开javascript.json.</p>
<p>具体路径:<code>文件\首选项\用户snippet,选择要配置的语言</code></p>
<p>打开后会有一段注释,注释中已经给出了一个模板</p>
<pre><code class="json">    &quot;Print to console&quot;: {
        &quot;prefix&quot;: &quot;log&quot;,
        &quot;body&quot;: [
            &quot;console.log(&#39;$1&#39;);&quot;,
            &quot;$2&quot;
        ],
        &quot;description&quot;: &quot;Log output to console&quot;
    }</code></pre>
<ul>
<li><code>Print to console</code> 对应代码片段名称。</li>
<li><code>prefix</code> 对应触发代码片段的字符。</li>
<li><code>body</code> 对应代码片段内容，可以是字符串，也可以为数组，若为数组每个元素都做为单独的一行插入。<code>body</code> 的内容支持js的转义字符，如 <code>\n\r</code>  等，我个人不建议用 <code>\n</code> ，可另起一行给数组多插入一项，不然一行太多的话不容易观察代码块的格式。</li>
<li><code>description</code> 对应代码片段描述。</li>
</ul>
<p>要达到我需要的效果,改写成如下代码</p>
<pre><code class="json">    &quot;Print to for&quot;: {
        &quot;prefix&quot;: &quot;for&quot;,
        &quot;body&quot;: [
            &quot;for ( ${1:index} = 0; ${1:index} &lt; ${2:array}.length; ${1:index}++) {&quot;,
            &quot;\t$0&quot;,
            &quot;}&quot;
        ],
        &quot;description&quot;: &quot;Print to for&quot;
    }</code></pre>
<p>其中\t是制表符,用来对齐的</p>
<p>$1是光标的位置,按下Tab光标移动到$2,而$0则是终止Tab键的光标操作.</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript函数</title>
    <url>/2020/01/08/JavaScript/javascript%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><h3 id="js不换行输出"><a href="#js不换行输出" class="headerlink" title="js不换行输出"></a><a href="https://blog.csdn.net/hsj1669666567/article/details/83240102" target="_blank" rel="noopener">js不换行输出</a></h3><pre><code class="js">process.stdout.write();</code></pre>
<a id="more"></a>

<h3 id="split-方法"><a href="#split-方法" class="headerlink" title="split() 方法"></a><a href="https://www.runoob.com/jsref/jsref-split.html" target="_blank" rel="noopener">split() 方法</a></h3><blockquote>
<p>split() 方法用于把一个字符串分割成字符串数组。</p>
<p><strong>提示：</strong> 如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。</p>
<p><strong>注意：</strong> split() 方法不改变原始字符串。</p>
</blockquote>
<h3 id="sort-方法"><a href="#sort-方法" class="headerlink" title="sort()方法"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noopener">sort()方法</a></h3><blockquote>
<p>如果没有指明 <code>compareFunction</code> ，那么元素会按照转换为的字符串的诸个字符的Unicode位点进行排序。字母会按照<code>abcd...</code>排序例如 “Banana” 会被排列到 “cherry” 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 <code>compareFunction</code>），比较的数字会先被转换为字符串，所以在Unicode顺序上 “80” 要比 “9” 要靠前。 </p>
</blockquote>
<p>如果指明了 <code>compareFunction</code> ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：</p>
<ul>
<li><p>如果 <code>compareFunction(a, b)</code> 小于 0 ，那么 a 会被排列到 b 之前；</p>
</li>
<li><p>如果 <code>compareFunction(a, b)</code> 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；</p>
</li>
<li><p>如果 <code>compareFunction(a, b)</code> 大于 0 ， b 会被排列到 a 之前。</p>
</li>
<li><p><code>compareFunction(a, b)</code> 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript笔记</title>
    <url>/2020/01/06/JavaScript/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><h4 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符"></a>相等操作符</h4><h5 id="1-相等和不相等"><a href="#1-相等和不相等" class="headerlink" title="1. 相等和不相等(==)"></a>1. 相等和不相等(==)</h5><a id="more"></a>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数签名"><a href="#函数签名" class="headerlink" title="函数签名"></a>函数签名</h4><p> <strong>函数签名</strong>（或者<em>类型</em>签名，抑或<em>方法</em>签名）定义了 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Function" target="_blank" rel="noopener">函数</a>或<a href="https://developer.mozilla.org/en-US/docs/Glossary/Method" target="_blank" rel="noopener">方法</a>的输入与输出。 </p>
<p>签名可包含以下内容：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Parameter" target="_blank" rel="noopener">参数</a> 及参数的 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Type" target="_blank" rel="noopener">类型</a></li>
<li>一个的返回值及其类型</li>
<li>可能会抛出或传回的<a href="https://developer.mozilla.org/en-US/docs/Glossary/Exception" target="_blank" rel="noopener">异常</a></li>
<li>该方法在 <a href="https://developer.mozilla.org/en-US/docs/Glossary/OOP" target="_blank" rel="noopener">面向对象</a>程序中的可用性方面的信息（如<code>public</code>、<code>static</code>或<code>prototype</code>）。</li>
</ul>
<h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><p>需要注意:没有传递值的命名参数将自动被赋予undefined值</p>
<pre><code class="js">function doAdd(num1, num2) {
    arguments[1] = 10;
    console.log(arguments[0], num2);
}

doAdd(1);

输出结果:
1 undefined</code></pre>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode之prettier插件配置</title>
    <url>/2020/01/05/Vscode/Prettierr%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="针对不同语言配置"><a href="#针对不同语言配置" class="headerlink" title="针对不同语言配置"></a>针对不同语言配置</h2><p><strong>vscode使用prettier进行格式化的小伙伴一定会有这样的需求:</strong></p>
<p>对不同语言缩进不同的空格数</p>
<p>比如说html缩进4格,而css只想缩进2格</p>
<p>我在网上看个很多别人写的prettier自定义配置,但是都没弄懂.</p>
<p>最后还是反复看官方文档才终于搞懂了</p>
<a id="more"></a>

<h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><i style="display:none">官方文档</i></h4><ul>
<li><h4 id="官方文档-1"><a href="#官方文档-1" class="headerlink" title="官方文档"></a><a href="https://github.com/prettier/prettier-vscode" target="_blank" rel="noopener">官方文档</a></h4></li>
</ul>
<p>之前看了官方文档,在vscode全局配置文件<code>setting.json</code>中修改使不同语言使用不同格式化插件</p>
<pre><code class="json">&quot;[html]&quot;: {
        &quot;editor.defaultFormatter&quot;: &quot;HookyQR.beautify&quot;
    },
&quot;[css]&quot;: {
        &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;
    },</code></pre>
<p>这样虽然解决了问题,但是很麻烦</p>
<h3 id="1-单个项目配置"><a href="#1-单个项目配置" class="headerlink" title="1. 单个项目配置"></a>1. 单个项目配置</h3><p>prettier官方给出了针对不同项目配置prettier的方法:</p>
<p>在项目根目录建立<code>.prettierrc</code>文件</p>
<pre><code class="json">{
    &quot;semi&quot;: false,
    &quot;overrides&quot;: [
        {
            &quot;files&quot;: &quot;*.test.js&quot;,
            &quot;options&quot;: {
                &quot;semi&quot;: true
            }
        },
        {
            &quot;files&quot;: [&quot;*.html&quot;, &quot;legacy/**/*.js&quot;],
            &quot;options&quot;: {
                &quot;tabWidth&quot;: 4
            }
        },
        {
            &quot;files&quot;: [&quot;*.css&quot;],
            &quot;options&quot;: {
                &quot;tabWidth&quot;: 2
            }
        }
    ]
}</code></pre>
<p>从上面可以看出,<code>.prettierrc</code>文件对不同格式的文件自定义了不同的<code>tabWidth</code>值,而<code>tabWidth</code>就是缩进的空格数,这样做可以方便地配置不同格式下prettier的选项,但是对我来说还不够,因为每建一个项目就要建一个这个文件(我有时候会忘记).于是我想弄成全局配置.</p>
<h3 id="2-全局配置"><a href="#2-全局配置" class="headerlink" title="2. 全局配置"></a>2. 全局配置</h3><p>官方文档在扩展设置一栏中给了一个<code>prettier.configPath</code></p>
<blockquote>
<p>prettier.configPath<br>提供更漂亮的配置文件的自定义路径。</p>
<p>注意，如果设置了该值，将始终使用该值，并且本地配置文件将被忽略。全局默认值的一个更好的选择是将~/.prettierrc文件放在主目录中。</p>
</blockquote>
<p>在setting.json中配置如下:</p>
<pre><code class="json">//指定全局全局配置文件
&quot;prettier.configPath&quot;: &quot;***\\.prettierrc&quot;,</code></pre>
<p><code>.prettierrc</code>就是上面写的配置文件,只要在<code>setting.json</code>中指定配置文件,就会应用到全局</p>
<p><strong style="color:red">需要注意的是,如果设置了这个选项,那你项目目录的<code>.prettierrc</code>文件就会失效.</strong></p>
<h2 id="prettier设置详解"><a href="#prettier设置详解" class="headerlink" title="prettier设置详解"></a>prettier设置详解</h2><p>prettier给出了如下设置选项</p>
<pre><code class="json">prettier.arrowParens    //在单独的箭头函数周围加上()    默认always
prettier.bracketSpacing    //在对象{}之间加上空格
prettier.endOfLine
prettier.htmlWhitespaceSensitivity
prettier.insertPragma
prettier.jsxBracketSameLine    //在jsx中把&#39;&gt;&#39; 是否单独放一行
prettier.jsxSingleQuote    //jsx中使用单引号
prettier.printWidth
prettier.proseWrap
prettier.quoteProps
prettier.requirePragma
prettier.semi    //行末分号
prettier.singleQuote    //使用单引号而不是双引号
prettier.tabWidth    //tab的宽度
prettier.trailingComma    //尾随逗号
prettier.useTabs   //使用制表符代替空格缩进
prettier.vueIndentScriptAndStyle</code></pre>
]]></content>
      <tags>
        <tag>电脑好软</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>everything搜索</title>
    <url>/2020/01/05/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/everything%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<p>everything常用技巧</p>
<p><a href="https://blog.csdn.net/x_iya/article/details/12178279" target="_blank" rel="noopener">参考链接</a></p>
<h5 id="1-指定文件目录搜索示例"><a href="#1-指定文件目录搜索示例" class="headerlink" title="1. 指定文件目录搜索示例:"></a>1. 指定文件目录搜索示例:</h5><p> <strong><em>\</em>TDDOWNLOAD\ abc\</strong>     *<em>在所有TDDOWNLOAD文件夹下搜索包含abc字符的文件及文件夹*<strong>*<br>**\</strong>TDDOWNLOAD\ \</em>.jpg**    *<em>在所有TDDOWNLOAD文件夹下搜索jpg后缀文件*<strong>*<br>**\</strong>F:\TDDOWNLOAD\ abc**   *<em>在F:\TDDOWNLOAD\目录下搜索包含abc字符的文件及文件夹***</em><br><strong>\</strong>F:\TDDOWNLOAD\ \</em>.jpg**  *<em>在F:\TDDOWNLOAD\目录下搜索jpg后缀文件***</em> </p>
]]></content>
      <tags>
        <tag>电脑好软</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo插件配置</title>
    <url>/2020/01/04/%E5%8D%9A%E5%AE%A2/hexo%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>无意中逛到hexo 的插件<strong><a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">hexo-helper-live2d</a></strong></p>
<p>是一个人物随着你的鼠标晃啊晃~</p>
<p>hexo站点目录</p>
<img src="https://i.loli.net/2020/01/05/cE9W6HUCDyM2axK.png" alt="1578150614652.png" style="zoom:80%;" />

]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2020/01/04/Git/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener"><span style="font-size:1.75em">参考链接</span></a></p>
<h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><p>使用当前目录作为Git仓库，初始化本地仓库</p>
<pre><code class="bash"># 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]</code></pre>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS/Bootstrap</title>
    <url>/2020/01/04/CSS/Bootstrap/</url>
    <content><![CDATA[<h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><h2 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h2><p>Boostrap栅格系统工作原理:</p>
<ul>
<li>“行（row）”必须包含在 <code>.container</code> （固定宽度）或 <code>.container-fluid</code> （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。 </li>
</ul>
<h3 id="bootstrap面板组件"><a href="#bootstrap面板组件" class="headerlink" title="bootstrap面板组件"></a><a href="https://v3.bootcss.com/components/#panels" target="_blank" rel="noopener">bootstrap面板组件</a></h3><h3 id="bootstrap-validator插件的使用"><a href="#bootstrap-validator插件的使用" class="headerlink" title="bootstrap-validator插件的使用"></a>bootstrap-validator插件的使用</h3><h4 id="重置表单"><a href="#重置表单" class="headerlink" title="重置表单"></a>重置表单</h4><p>四、重置表单校验样式<br>    1- 重置 reset  作用是重置表单的数据 ， 无法样式<br>    2- 可以使用 插件提供 resetForm()方法， 用于重置表单校验样式</p>
<p>表单插件提供了很多方法， 需要通过插件实例去进行调用：<br>获取插件实例：  <code>$(表单).data(&#39;bootstrapValidator&#39;)</code><br>通过插件实例 去调用插件方法；<br>$(‘.login-form’).data(‘bootstrapValidator’).resetForm();</p>
<p>思路：<br>  点击重置按钮，重置表单的数据和校验样式</p>
]]></content>
  </entry>
  <entry>
    <title>常见问题总结</title>
    <url>/2020/01/04/%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="什么是标签语义化-标签语义化有什么优势-你知道的常见语义化标签有哪些"><a href="#什么是标签语义化-标签语义化有什么优势-你知道的常见语义化标签有哪些" class="headerlink" title="什么是标签语义化? 标签语义化有什么优势? 你知道的常见语义化标签有哪些?"></a>什么是标签语义化? 标签语义化有什么优势? 你知道的常见语义化标签有哪些?</h3>]]></content>
      <tags>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>css逻辑运算符</title>
    <url>/2020/01/02/CSS/css%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p><a href="http://blog.mingsixue.com/effect/CSS-not-use-skill.html" target="_blank" rel="noopener">参考链接</a></p>
<h1 id="CSS-not-选择器使用技巧"><a href="#CSS-not-选择器使用技巧" class="headerlink" title="CSS :not()选择器使用技巧"></a>CSS :not()选择器使用技巧</h1><h2 id="1、使用-not-去除列表最后一个元素的右边框"><a href="#1、使用-not-去除列表最后一个元素的右边框" class="headerlink" title="1、使用:not()去除列表最后一个元素的右边框"></a>1、使用:not()去除列表最后一个元素的右边框</h2><p>css代码:</p>
<pre><code class="css">li:not(:last-child) {
    border-right: 3px solid red;
}</code></pre>
<p>其中需要注意的是,li必须是最后一个子代标签.</p>
<a id="more"></a>

<h3 id="子代选择器的规则"><a href="#子代选择器的规则" class="headerlink" title="子代选择器的规则"></a>子代选择器的规则</h3><pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        * {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
        }

        .father {
            list-style: none;
            width: 600px;
            height: 400px;
            background-color: pink;
        }

        .son {
            width: 50px;
            height: 50px;
            float: left;
            background-color: lime;
        }

        span {
            width: 100px;
            height: 100px;
            background-color: blue;
            /* border-right: 3px solid red; */
            float: left;
            margin-right: 20px;
        }

        /* 子元素中的标签,如果是span标签,则生效;如果被其他元素占用,则无效 */
        /* span:nth-child(5) {
            background-color: yellow;
            border-right: 5px solid red;
        } */

        /* 子元素中的span标签,其他元素的占用不影响span顺序 */
        /* span:nth-of-type(4) {
            background-color: yellow;
            border-right: 3px solid red;
        } */

        /* 子元素中的span标签,最后一个元素是span,则生效;反之无效 */
        /* span:last-child {
            border-right: 3px solid red;
        } */

        /* 与nth-child相反,从反方向开始计数,如果被其他元素占用,则无效 */
        /* span:nth-last-child(2) {
            border-right: 3px solid red;
        } */

        /* 与nth-child相反,从反方向开始计数,其他元素的占用不影响 */
        /* span:nth-last-of-type(2) {
            border-right: 3px solid red;
        } */

        /* 除最后一个span元素外都生效,其他元素会影响 */
        /* span:not(:last-child) {
            border-right: 3px solid red;
        } */

        /* 除最后一个span元素外都生效,其他元素不影响 */
        span:not(:last-of-type) {
            border-right: 3px solid red;
        }
    &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=&quot;father&quot;&gt;
        &lt;span&gt;&lt;/span&gt;
        &lt;span&gt;&lt;/span&gt;
        &lt;span&gt;&lt;/span&gt;
        &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;
        &lt;span&gt;&lt;/span&gt;
        &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>媒体查询</title>
    <url>/2020/01/01/CSS/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>响应式web设计</p>
<p>媒体查询写入样式表</p>
<h4 id="在样式表中嵌入媒体查询"><a href="#在样式表中嵌入媒体查询" class="headerlink" title="在样式表中嵌入媒体查询"></a>在样式表中嵌入媒体查询</h4><pre><code class="css">/* 在样式表中嵌入媒体查询 */
@media (max-width: 480px) {
    body {
        /* 这里是样式属性 */
    }
    .box {
        /* 这是样式属性 */
    }
}</code></pre>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>rime折腾记</title>
    <url>/2019/12/31/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE/rime%E6%8A%98%E8%85%BE%E8%AE%B0/</url>
    <content><![CDATA[<p>rime折腾之手机篇</p>
<p>android上的rime叫同文输入法</p>
<p><a href="https://github.com/osfans/trime/wiki/UserGuide" target="_blank" rel="noopener">用户手册</a></p>
<p> 配置输入法（键盘及各种界面功能），可参考<a href="https://github.com/osfans/trime/wiki/trime.yaml詳解" target="_blank" rel="noopener"><code>trime.yaml</code>详解</a>。 </p>
<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>在<code>/rime</code>目录下创建<code>trime.custom.yaml</code>文件,这是修改默认主题的配置文件</p>
<p>如果要修改其他主题的配置文件，需另外新建配置文件。如同文风主题，新建名为<code>tongwenfeng.trime.custom.yaml</code>的配置文件。</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>rime输入法配置问题</title>
    <url>/2019/12/30/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE/rime%E8%BE%93%E5%85%A5%E6%B3%95%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>首先在 「用户文件夹」（%appdata%）目录下新建2个文件<code>default.custom.yaml</code>和<code>weasel.custom.yaml</code></p>
<p>其中 <code>default.custom.yaml</code>是设置一些默认设置的配置文件,而<code>weasel.custom.yaml</code>是我们自定义设置的配置文件</p>
<p><a href="https://github.com/rime/home/wiki/CustomizationGuide" target="_blank" rel="noopener">官方定制指南</a></p>
<h4 id="定制字体"><a href="#定制字体" class="headerlink" title="定制字体"></a>定制字体</h4><pre><code class="yaml"># weasel.custom.yaml

patch:
  &quot;style/font_face&quot;: &quot;明兰&quot;  # 字體名稱，從記事本等處的系統字體對話框裏能看到
  &quot;style/font_point&quot;: 14     # 字號，只認數字的，不認「五號」、「小五」這樣的</code></pre>
]]></content>
      <tags>
        <tag>电脑好软</tag>
      </tags>
  </entry>
  <entry>
    <title>div对齐问题</title>
    <url>/2019/12/24/CSS/div%E5%AF%B9%E9%BD%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在仿京东页面的时候遇到了一个问题，dl中的内容不一样导致盒子高度不同，对齐结果不是预期的</p>
<img src="https://i.loli.net/2019/12/24/UuBJwfYyoLxXalI.png" alt="">

<p> <strong>原因</strong>：不同浏览器有不同的布局方式，有的是默认上对齐，有的是默认下对齐。 这里我的浏览器默认是下对齐。</p>
<p> <strong>解决方案</strong>： 给子div加上样式： <code>vertical-align:top;</code>即可。 </p>
<h5 id="vertical-align相关知识"><a href="#vertical-align相关知识" class="headerlink" title="vertical-align相关知识"></a><a href="https://www.w3cschool.cn/cssref/pr-pos-vertical-align.html" target="_blank" rel="noopener">vertical-align相关知识</a></h5>]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>品优购</title>
    <url>/2019/12/24/CSS/%E5%93%81%E4%BC%98%E8%B4%AD/</url>
    <content><![CDATA[<h3 id="copyright"><a href="#copyright" class="headerlink" title="copyright"></a>copyright</h3><p>仿照<a href="https://www.jd.com/" target="_blank" rel="noopener">京东</a></p>
<a id="more"></a>

<pre><code class="html">&lt;!-- 仿照京东的copyright写的 --&gt;
    &lt;div class=&quot;copyright&quot;&gt;
        &lt;div class=&quot;copyright_links w&quot;&gt;
            &lt;p&gt;
                &lt;a href=&quot;#&quot;&gt;关于我们&lt;/a&gt;&lt;span class=&quot;copyright_split&quot;&gt;|&lt;/span&gt;
                &lt;a href=&quot;#&quot;&gt;联系我们&lt;/a&gt;&lt;span class=&quot;copyright_split&quot;&gt;|&lt;/span&gt;
                &lt;a href=&quot;#&quot;&gt;联系客服&lt;/a&gt;&lt;span class=&quot;copyright_split&quot;&gt;|&lt;/span&gt;
                &lt;a href=&quot;#&quot;&gt;商家入驻&lt;/a&gt;&lt;span class=&quot;copyright_split&quot;&gt;|&lt;/span&gt;
                &lt;a href=&quot;#&quot;&gt;营销中心&lt;/a&gt;&lt;span class=&quot;copyright_split&quot;&gt;|&lt;/span&gt;
                &lt;a href=&quot;#&quot;&gt;手机品优购&lt;/a&gt;&lt;span class=&quot;copyright_split&quot;&gt;|&lt;/span&gt;
                &lt;a href=&quot;#&quot;&gt;友情链接&lt;/a&gt;&lt;span class=&quot;copyright_split&quot;&gt;|&lt;/span&gt;
                &lt;a href=&quot;#&quot;&gt;销售联盟&lt;/a&gt;&lt;span class=&quot;copyright_split&quot;&gt;|&lt;/span&gt;
                &lt;a href=&quot;#&quot;&gt;品优购社区&lt;/a&gt;&lt;span class=&quot;copyright_split&quot;&gt;|&lt;/span&gt;
                &lt;a href=&quot;#&quot;&gt;品优购公益&lt;/a&gt;&lt;span class=&quot;copyright_split&quot;&gt;|&lt;/span&gt;
                &lt;a href=&quot;#&quot;&gt;English Site&lt;/a&gt;&lt;span class=&quot;copyright_split&quot;&gt;|&lt;/span&gt;
                &lt;a href=&quot;#&quot;&gt;Contact U&lt;/a&gt;
            &lt;/p&gt;
        &lt;/div&gt;
        &lt;dvi class=&quot;copyright_info&quot;&gt;
            &lt;p&gt;
                地址：北京市昌平区建材城西路金燕龙办公楼一层&amp;nbsp;邮编：100096&amp;nbsp;电话：400-618-4000&amp;nbsp;传真：010-82935100&amp;nbsp;邮箱：zhanghj+itcast.cn
            &lt;/p&gt;
            &lt;p&gt;
                (京)ICP备08001421号京公安网安备110108007702
            &lt;/p&gt;
        &lt;/dvi&gt;
    &lt;/div&gt;</code></pre>
<p>CSS:</p>
<pre><code class="css">/* ###copyright */
/* links */
.copyright {
    height: 150px;
    padding-top: 20px;
    border-top: 2px solid yellowgreen;
    background-color: #f5f5f5;
}
.copyright_links {
    /* height: 20px; */
    text-align: center;
    /* background-color: red; */
}
.copyright_links {
    /* background-color: pink; */
}
.copyright_links a {
    color: #666;
}
.copyright_links span {
    margin: 0 10px;
    color: #ccc;
}
/* copyright_info */
.copyright_info{
    text-align: center;
    color: #999999;
}</code></pre>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>居中的问题</title>
    <url>/2019/12/24/CSS/%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<p>多行文本的居中<br>不能用<code>line-height</code></p>
<p>使用<code>margin-top</code>和<code>margin-bottom</code>来解决</p>
<p>给行内块元素的父级设置font-size=0可以消除上下左右边距</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>创建一个搜索框</title>
    <url>/2019/12/23/CSS/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E6%A1%86/</url>
    <content><![CDATA[<p>创建一个searchbox的步骤：</p>
<ul>
<li>大盒子searchbox<ul>
<li>小盒子搜索框input</li>
<li>按钮button</li>
</ul>
</li>
</ul>
<pre><code class="html"></code></pre>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>关于元素的居中</title>
    <url>/2019/12/21/CSS/%E5%85%B3%E4%BA%8E%E5%85%83%E7%B4%A0%E7%9A%84%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<h4 id="水平居中、垂直居中、水平垂直居中、浮动居中、绝对定位居中"><a href="#水平居中、垂直居中、水平垂直居中、浮动居中、绝对定位居中" class="headerlink" title="水平居中、垂直居中、水平垂直居中、浮动居中、绝对定位居中"></a><a href="https://segmentfault.com/a/1190000015095402" target="_blank" rel="noopener">水平居中、垂直居中、水平垂直居中、浮动居中、绝对定位居中</a></h4><h3 id="1-常规元素的水平居中"><a href="#1-常规元素的水平居中" class="headerlink" title="1. 常规元素的水平居中"></a>1. 常规元素的水平居中</h3><ul>
<li>行内元素、不定宽块级元素：text-align </li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>创建一个导航栏</title>
    <url>/2019/12/19/CSS/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<p>首先确定一个通栏的盒子，然后版心</p>
<p>使用无序列表来布置导航栏</p>
<ol>
<li>对ul设定高度和宽度(可以是100%，如果有继承高度的话)</li>
<li>对li设定：转换为块元素，左浮动以排成一排，设定左右边距，<code>list-style-type: none;</code>去除点点。这个时候列表还未居中。</li>
<li>对li中a设定：显示模式行内块元素(也可以不用)，设定高度(如果从ul继承了高度，可以不写)和行高来居中，<code>text-decoration: none;</code>去除下划线</li>
</ol>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML笔记</title>
    <url>/2019/12/19/Html/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="input元素的属性"><a href="#input元素的属性" class="headerlink" title="input元素的属性"></a>input元素的属性</h3><h4 id="height属性"><a href="#height属性" class="headerlink" title="height属性"></a>height属性</h4><p> 规定 &lt;input&gt;元素的高度。(只针对type=”image”)</p>
<p> width 属性规定&lt;input&gt; 元素的宽度。 (只针对type=”image”) </p>
<h3 id="input输入框默认在输入时会出现蓝色边框"><a href="#input输入框默认在输入时会出现蓝色边框" class="headerlink" title="input输入框默认在输入时会出现蓝色边框"></a>input输入框默认在输入时会出现蓝色边框</h3><p>如何去除？</p>
<p>这是是跟css的<a href="https://www.w3cschool.cn/cssref/pr-outline.html" target="_blank" rel="noopener">outline属性</a>有关</p>
<p>其中</p>
<table>
<thead>
<tr>
<th><em>outline-color</em></th>
<th>规定边框的颜色。参阅：<a href="https://www.w3cschool.cn/cssref/pr-outline-color.html" target="_blank" rel="noopener">outline-color</a> 中可能的值。</th>
</tr>
</thead>
<tbody><tr>
<td><em>outline-style</em></td>
<td>规定边框的样式。参阅：<a href="https://www.w3cschool.cn/cssref/pr-outline-style.html" target="_blank" rel="noopener">outline-style</a> 中可能的值。</td>
</tr>
<tr>
<td><em>outline-width</em></td>
<td>规定边框的宽度。参阅：<a href="https://www.w3cschool.cn/cssref/pr-outline-width.html" target="_blank" rel="noopener">outline-width</a> 中可能的值。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 outline 属性的设置。</td>
</tr>
</tbody></table>
<p>使用<code>outline:none</code>即可去除。</p>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题个性化设置</title>
    <url>/2019/12/15/%E5%8D%9A%E5%AE%A2/next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="Next相关配置"><a href="#Next相关配置" class="headerlink" title="Next相关配置"></a><a href="https://io-oi.me/tech/hexo-next-optimization/" target="_blank" rel="noopener">Next相关配置</a></h2><h2 id="Next主题个性化设置"><a href="#Next主题个性化设置" class="headerlink" title="Next主题个性化设置"></a>Next主题个性化设置</h2><pre><code class="sh">git clone https://github.com/theme-next/hexo-theme-next themes/next</code></pre>
<h3 id="Next安装后修改站点语言的问题"><a href="#Next安装后修改站点语言的问题" class="headerlink" title="Next安装后修改站点语言的问题"></a>Next安装后修改站点语言的问题</h3><blockquote>
<p>在安装后站点根目录配置文件/_config.yml中language属性是 zh-Hans，但是站点语言并不是中文？</p>
</blockquote>
<p>参考链接： <a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93251246" target="_blank" rel="noopener">https://blog.csdn.net/mqdxiaoxiao/article/details/93251246</a> </p>
<h3 id="设定代码高亮主题"><a href="#设定代码高亮主题" class="headerlink" title="设定代码高亮主题"></a>设定代码高亮主题</h3><p>NexT使用Tomorrow Theme作为代码高亮，共有5款主题供你选择: normal | night | night eighties | night blue | night bright,默认使用的是白色的normal<br> 编辑站点的_config.yml：</p>
<pre><code class="yaml"># Code Highlight theme
# Available value: normal | night | night eighties | night blue | night bright
# https://github.com/chriskempson/tomorrow-theme
highlight_theme: normal</code></pre>
<h4 id="Next-Schemes"><a href="#Next-Schemes" class="headerlink" title="Next  Schemes"></a>Next  Schemes</h4><h2 id="Next主题颜色配置"><a href="#Next主题颜色配置" class="headerlink" title="Next主题颜色配置"></a>Next主题颜色配置</h2><h3 id="主题颜色"><a href="#主题颜色" class="headerlink" title="主题颜色"></a>主题颜色</h3><p>next主题的颜色在模板中都是用形如<code>$gray-lighter</code>,<code>$black-light</code>来定义的,其定义文件目录为:</p>
<p><code>hexo/themes/next/source/css/_variables/base.styl</code></p>
<h4 id="知识拓展-styl是什么文件"><a href="#知识拓展-styl是什么文件" class="headerlink" title="知识拓展: styl是什么文件?"></a>知识拓展: styl是什么文件?</h4><blockquote>
<p> <code>Stylus</code> 是一个CSS的预处理框架，2010年产生，来自Node.js社区，主要用来给Node项目进行CSS预处理支持，所以 <code>Stylus</code> 是一种新型语言，可以创建健壮的、动态的、富有表现力的CSS。比较年轻，其本质上做的事情与 <code>SASS</code>/<code>LESS</code> 等类似，应该是有很多借鉴，所以近似脚本的方式去写CSS代码。 </p>
<p><a href="https://juejin.im/entry/59a3dd10f265da247d728f26" target="_blank" rel="noopener">参考链接</a></p>
</blockquote>
<p>找到Colors代码段</p>
<pre><code class="stylus">// Colors
// colors for use across theme.
// --------------------------------------------------
$whitesmoke   = #f5f5f5;
$gainsboro    = #eee;
$gray-lighter = #ddd;
$grey-light   = #ccc;
$grey         = #bbb;
$grey-dark    = #999;
$grey-dim     = #666;
$black-light  = #555;
$black-dim    = #333;
$black-deep   = #222;
$red          = #ff2a2a;
$blue-bright  = #87daff;
$blue         = #0684bd;
$blue-deep    = #262a30;
$orange       = #fc6423;
$black        = rgba(0,0,0,0.84);</code></pre>
<p>其中最后一个<code>$black</code>是我自己添加的</p>
<p>具体使用在样式中是这样的</p>
<pre><code class="stylus">blockquote {
  border-left: 3px solid $black;
}</code></pre>
<p>其效果等效于css中的</p>
<pre><code class="css">blockquote {
  border-left: 3px solid rgba(0,0,0,0.84);
}</code></pre>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>css布局</title>
    <url>/2019/12/15/CSS/css%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="使用float定位元素"><a href="#使用float定位元素" class="headerlink" title="使用float定位元素"></a>使用float定位元素</h2><p>关于float的理解可以看<a href="https://segmentfault.com/a/1190000009739176" target="_blank" rel="noopener">这篇文章</a></p>
 <img src="https://i.loli.net/2019/12/15/K9iwX5h8R7qupaF.png" alt="" width=60%>

<p><strong>注意：</strong><b style="color:red">如果不是浮动有固定宽度的图像，必须要为浮动元素设置宽度，这样浏览器才会流出空间显示围绕它的内容。</b></p>
<p><b style="color:blue">margin的auto值对浮动的元素不起作用，没有属性可以让一个浮动元素居中</b></p>
<p>所以一般使用一个正常的块级元素居中，带着里面浮动的元素居中。</p>
<p><i><strong>浮动可以让块级元素拍成一排</strong></i></p>
<h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p><strong>float具有破坏性，会导致父元素坍塌，所以需要清除浮动，方法有很多种。</strong></p>
<ol>
<li><p>为父元素添加<code>overflow:hidden</code></p>
</li>
<li><p>浮动父元素</p>
</li>
<li><p><code>clear:both</code></p>
</li>
<li><p>Clearfix方法</p>
<pre><code class="css">.clearfix:after{
    content:&#39;&#39;;
    display:table;
    clear:both;
}
.clearfix{
    *zoom:1; /* 兼容IE低版本 */
}</code></pre>
</li>
</ol>
<h2 id="position属性定位元素"><a href="#position属性定位元素" class="headerlink" title="position属性定位元素"></a>position属性定位元素</h2><p><a href="https://segmentfault.com/a/1190000009754431" target="_blank" rel="noopener">position详解</a></p>
<h3 id="固定导航栏"><a href="#固定导航栏" class="headerlink" title="固定导航栏"></a>固定导航栏</h3><pre><code class="css">.banner{
    position: fixed;
    left: 0;
    right: 0;
    top: 0;
}</code></pre>
<p>固定定位的的元素从HTML流中移除了，而页面中的其他元素并不知道这些元素的存在。这些元素会出现在固定元素的后面。使用外边距把这些内容从那些区域后面移出来。</p>
<p>鼠标观滚动对固定定位元素没有用</p>
<h2 id="Transform属性"><a href="#Transform属性" class="headerlink" title="Transform属性"></a>Transform属性</h2><blockquote>
<p>css3中transform属性定义元素空间位置的变换。</p>
</blockquote>
<h3 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h3><ul>
<li>设置元素在 X轴或者 Y轴上的平移变换</li>
</ul>
<h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><p>默认情况下的层级性：标准流    &lt;    浮动流    &lt;    定位流</p>
<p>z-index：控制的是定位元素之间的层级性</p>
<p>如果父元素已经比较过层级了(都有z-index值且不为auto)，那么子元素不会再比较层级</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo标签页显示空白的问题</title>
    <url>/2019/12/13/%E5%8D%9A%E5%AE%A2/hexo%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="hexo标签页显示空白的问题"><a href="#hexo标签页显示空白的问题" class="headerlink" title="hexo标签页显示空白的问题"></a>hexo标签页显示空白的问题</h3><p>hexo导航栏设置教程可以看<a href="https://rilzob.com/2018/10/25/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5%EF%BC%9A%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE%E7%9A%84%E5%89%AF%E6%9C%AC/" target="_blank" rel="noopener">这篇文章</a>以及<a href="https://www.jianshu.com/p/b75146d016e6" target="_blank" rel="noopener">hexo主题优化</a></p>
<p>按照网上的教程设置tags后点开标签页却是空白</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode/vscode插件配置问题</title>
    <url>/2019/12/13/Vscode/vscode%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="vscode的插件配置"><a href="#vscode的插件配置" class="headerlink" title="vscode的插件配置"></a>vscode的插件配置</h2><p>默认配置在插件安装目录下的<strong>package.json</strong>文件</p>
<p>如果是全局配置需要在<code>/.code/User</code>目录下修改<strong>setting.json</strong>文件</p>
<p>修改完配置文件需要重启vscode</p>
<p>命令 reload window</p>
<a id="more"></a>]]></content>
  </entry>
  <entry>
    <title>常用技巧/everything无法使用修饰符搜索</title>
    <url>/2019/12/11/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/everything%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E4%BF%AE%E9%A5%B0%E7%AC%A6%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h2 id="记一次解决困扰我的问题"><a href="#记一次解决困扰我的问题" class="headerlink" title="记一次解决困扰我的问题"></a>记一次解决困扰我的问题</h2><blockquote>
<p>everything的修饰符等搜索语法的使用需要关闭正则表达式的功能才能使用</p>
</blockquote>
<p>闲来无事看了下everything的搜索语法，发现修饰符功能，可以仅搜索文件或文件夹等，这个功能一起从来没用过，于是立即就试了试，但是结果框一片空白，反复试了几次都没反应。不知道是什么问题，于是就到网上去搜啊，论坛，QQ群啊去问，没得到答案。</p>
<p>机缘巧合之下，我取消了搜索选项-启用正则表达式这一功能，突然就能用了 ，原来everthing的搜索语法是和正则不能同时使用的。</p>
]]></content>
  </entry>
  <entry>
    <title>常用技巧/善用搜索引擎</title>
    <url>/2019/12/11/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/%E5%96%84%E7%94%A8%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h2 id="善用搜索引擎"><a href="#善用搜索引擎" class="headerlink" title="善用搜索引擎"></a>善用搜索引擎</h2><p>我觉得用好搜索引擎能够事半功倍</p>
<p>这篇文章说得已经很清楚了</p>
<p> <a href="https://blog.csdn.net/iteye_20659/article/details/82511882" target="_blank" rel="noopener">https://blog.csdn.net/iteye_20659/article/details/82511882</a> </p>
<ol>
<li><p>双引号</p>
<p> 把搜索词放在双引号中，代表完全匹配搜索，也就是说搜索结果返回的页面包含双引号中出现的所有的词，连顺序也必须完全匹配。 </p>
</li>
<li><p>减号“-”</p>
<p> 减号代表搜索不包含减号后面的词的页面。 </p>
<p>注意：-好前面必须是空格，后面没有空格</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>css笔记</title>
    <url>/2019/12/11/CSS/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="推荐的css书写顺序"><a href="#推荐的css书写顺序" class="headerlink" title="推荐的css书写顺序"></a>推荐的css书写顺序</h2><ol>
<li>位置属性(position, top, right, z-index, display, float等)</li>
<li>大小(width, height, padding, margin)</li>
<li>文字系列(font, line-height, letter-spacing, color- text-align等)</li>
<li>背景(background, border等)</li>
<li>其他(animation, transition等)</li>
</ol>
<hr>
<ol>
<li>影响文档流的属性（比如：display, position, float, clear, visibility, table-layout等）</li>
<li>自身盒模型的属性（比如：width, height, margin, padding, border等）<ol start="3">
<li>排版相关属性（比如：font, line-height, text-align, text-indent, vertical-align等等）<ol start="4">
<li>装饰性属性（比如：color, background, opacity, cursor等）<ol start="5">
<li>生成内容的属性（比如：content, list-style, quotes等） </li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<hr>
<a id="more"></a>



<h3 id="font属性"><a href="#font属性" class="headerlink" title="font属性"></a>font属性</h3><p>font 简写属性在一个声明中设置所有字体属性。</p>
<p>可设置的属性是（按顺序）：</p>
<ul>
<li>font-style            字体风格</li>
<li>font-variant ——字体异体</li>
<li>font-weight——字体粗细</li>
<li>font-size/line-height——字体大小</li>
<li>font-family</li>
</ul>
<p>font-size和font-family的值是必需的。如果缺少了其他值，默认值将被插入，如果有默认值的话。</p>
<h3 id="背景-简写属性"><a href="#背景-简写属性" class="headerlink" title="背景- 简写属性"></a>背景- 简写属性</h3><pre><code class="css">body {background:#ffffff url(&#39;img_tree.png&#39;) no-repeat right top;}</code></pre>
<p>当使用简写属性时，属性值的顺序为：:</p>
<ul>
<li>background-color——背景颜色</li>
<li>background-image ——背景图片</li>
<li>background-repeat——背景图像平铺</li>
<li>background-attachment—— 背景图像是否固定或者随着页面的其余部分滚动。 </li>
<li>background-position——背景图像位置</li>
</ul>
<h2 id="CSS-text-align图片文字内容居左-居右-居中"><a href="#CSS-text-align图片文字内容居左-居右-居中" class="headerlink" title="CSS text-align图片文字内容居左 居右 居中"></a><a href="http://www.divcss5.com/rumen/r350.shtml" target="_blank" rel="noopener">CSS text-align图片文字内容居左 居右 居中</a></h2><h3 id="CSS链接"><a href="#CSS链接" class="headerlink" title="CSS链接"></a>CSS链接</h3><p>链接的状态：</p>
<ul>
<li><p>a:link - 正常，<strong>未访问</strong>过的链接</p>
</li>
<li><p>a:visited - 用户<strong>已访问</strong>过的链接</p>
</li>
<li><p>a:hover - 当用户<strong>鼠标悬浮</strong>在链接上时</p>
</li>
<li><p>a:active - 链接<strong>被点击</strong>的那一刻</p>
<p>text-decoration 属性主要用于删除链接中的下划线 </p>
</li>
</ul>
<pre><code class="css">a:link {color:#FF0000;}      /* 未访问链接*/
a:visited {color:#00FF00;}  /* visited link */
a:hover {color:#FF00FF;}  /* mouse over link */
a:active {color:#0000FF;}  /* selected link */</code></pre>
<h3 id="background属性"><a href="#background属性" class="headerlink" title="background属性"></a>background属性</h3><p>当使用简写属性时，属性值的顺序为：</p>
<ul>
<li>background-color    颜色</li>
<li>background-image   地址</li>
<li>background-repeat   平铺</li>
<li>background-attachment    滚动</li>
<li>background-position    起始位置</li>
</ul>
<h1 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h1><h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h3><pre><code class="css">display:inline;/* 块元素表现得更像行内元素 */

display:block/* 行内元素表现得更像块元素 */

display: inline-block; /* 既有行内元素的特征，又有块元素的特征，例如button标签 */</code></pre>
<pre><code class="css">        ul a,
        span {
            border-left: #cccccc 1px solid;
            /* 显示模式为行内块元素，即在一行之内可以分成一块一块显示 */
            display: inline-block;
            /* 盒子高度为40px (行内元素本身是没有宽、高属性的，通过display将显示模式转换为块元素后可以设置宽高) */
            height: 40px;
            /* 行高40px */
            /* 行高和盒子高度设置一致，可以使盒内元素垂直居中显示 */
            line-height: 40px;
            /* margin和padding中四个值的先后顺序为：上右下左 */
            padding: 0px 10px;
            /* 左外边距 */
            margin-left: -8px;
        }</code></pre>
<h3 id="CSS-float-属性"><a href="#CSS-float-属性" class="headerlink" title="CSS float 属性"></a>CSS float 属性</h3><p> float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。 </p>
<h3 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h3><h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><h3 id="水平导航栏"><a href="#水平导航栏" class="headerlink" title="水平导航栏"></a>水平导航栏</h3><p>两种方法实现水平导航栏</p>
<ol>
<li><p>内嵌列表项</p>
<pre><code class="css">li{
    display:inline;
}</code></pre>
</li>
</ol>
<ol start="2">
<li><p>浮动列表项</p>
<pre><code class="css">li{
    float:left;
}
a{
    display:block;
    width:60px;
}</code></pre>
</li>
</ol>
<h3 id="pdding的先后顺序为："><a href="#pdding的先后顺序为：" class="headerlink" title="pdding的先后顺序为："></a>pdding的先后顺序为：</h3><p><span style="color:red;font-size:1.5em">上右下左</span></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h3><p>标签样式继承自最近的父辈</p>
<h3 id="CSS3-border-radius-属性"><a href="#CSS3-border-radius-属性" class="headerlink" title="CSS3 border-radius 属性"></a>CSS3 border-radius 属性</h3><p> 向 div 元素添加圆角边框</p>
<h3 id="表示方位（background-position-属性）"><a href="#表示方位（background-position-属性）" class="headerlink" title="表示方位（background-position 属性）"></a>表示方位（background-position 属性）</h3><p><a href="https://www.w3cschool.cn/cssref/pr-background-position.html" target="_blank" rel="noopener">参考手册</a></p>
<ol>
<li><p>方位名词</p>
<p>上下左右中</p>
</li>
<li><p>坐标系</p>
<p>x,y值</p>
</li>
</ol>
<pre><code class="CSS">/* 背景简写  */
/* background：背景颜色 背景图片地址 背景平铺 背景滚动 背景位置 */
.background{
    background: pink url();
}
/* 注意：简写是有默认值的，如果之前有单一属性写法，简写的默认值会覆盖掉之前的值 */</code></pre>
<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>内盒模型：</p>
<p>外盒模型：</p>
<ul>
<li>margin：外边距，用来移动盒子</li>
</ul>
<p><b style="color:red">行内元素不要添加上下边距</b></p>
<h3 id="让块级元素水平居中？"><a href="#让块级元素水平居中？" class="headerlink" title="让块级元素水平居中？"></a>让块级元素水平居中？</h3><pre><code class="css">margin: 0 auto; /* 上下边距为0，左右边距自动分配 */</code></pre>
<h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><p>给当前元素设置</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS/使用em来设置字体大小</title>
    <url>/2019/12/11/CSS/%E4%BD%BF%E7%94%A8em%E6%9D%A5%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<h3 id="使用em来设置字体大小"><a href="#使用em来设置字体大小" class="headerlink" title="使用em来设置字体大小"></a>使用em来设置字体大小</h3><p> W3C 引荐使用 em 尺寸单元。 </p>
<p> 1em 就是今朝的字体尺寸。如果一个元素的 font-size 为 16 像素，那么对付该元素，1em 就就是 16 像素。在设置字体大小时，em 的值会相对于付父元素的字体大小窜改。 </p>
<p> 阅读器中默许的文本大小是 16 像素。因而 1em 的默许尺寸是 16 像素。 </p>
<p>可能应用下面这个公式将像素转换为 em：pixels/16=em</p>
<p>（注：16 就是父元素的默认字体大小，假如父元素的 font-size 为 20px，那么公式需改为：pixels/20=em）</p>
]]></content>
  </entry>
  <entry>
    <title>Html/表单和表格的嵌套</title>
    <url>/2019/12/10/Html/%E8%A1%A8%E5%8D%95%E5%92%8C%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%B5%8C%E5%A5%97/</url>
    <content><![CDATA[<h3 id="表单和表格的嵌套"><a href="#表单和表格的嵌套" class="headerlink" title="表单和表格的嵌套"></a>表单和表格的嵌套</h3><p>比较难懂的地方：</p>
<ol>
<li>表单与表格的嵌套必须将表单写在外面，因为表格有嵌套规则，table与tr之间不可以用其他标签。 </li>
<li>不要写错colspan和rowspan，合并之后多余的单元格要删除！！ </li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Html/表单</title>
    <url>/2019/12/10/Html/%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><pre><code class="html">//复选框
&lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot;&gt;

//多行文本框
&lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Html/html中的跳转</title>
    <url>/2019/12/10/Html/html%E4%B8%AD%E7%9A%84%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<h3 id="锚点跳转"><a href="#锚点跳转" class="headerlink" title="锚点跳转"></a>锚点跳转</h3><h5 id="一-页面内跳转"><a href="#一-页面内跳转" class="headerlink" title="一. 页面内跳转"></a>一. 页面内跳转</h5><p>方法一：</p>
<ol>
<li>设置一个锚点链接<code>&lt;a href=&quot;#miao&quot;&gt;去找喵星人&lt;/a&gt;</code>；（注意：href属性的属性值最前面要加#） </li>
<li>设置锚点的位置  <code>&lt;h3 id=&quot;miao&quot;&gt;喵星人基地&lt;/h3&gt;</code>；在要跳转到的位置的标签中添加一个id属性，属性值与①中href的属性值一样，不加# </li>
</ol>
<h5 id="二-跨页面跳转"><a href="#二-跨页面跳转" class="headerlink" title="二. 跨页面跳转"></a>二. 跨页面跳转</h5>]]></content>
  </entry>
  <entry>
    <title>Html/表格</title>
    <url>/2019/12/09/Html/%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><pre><code class="html">&lt;caption&gt;标签——表格标题，以居中的形式表现出来

&lt;thead&gt;标签——表格头

&lt;tr&gt;    table row    表格行

&lt;!-- 
    表格组成；
    table：完整的表格
    tr：表格行
    td：单元格
    table包含tr，tr包含td

    ##合并单元格
    rowspan：跨行合并
    colspan：跨列合并
    1.将rowspan或columnspan添加给对应的单元格（添加的位置遵守左上原则）
    2.合并的值为合并的单元格个数
    3.删除多余的单元格
 --&gt;
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Html/列表</title>
    <url>/2019/12/09/Html/%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>有序列表、无序列表、自定义列表</p>
<pre><code class="html">ol    有序列表
ul    无序列表
dl    定义列表

li    列表项</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Html/常用特殊字符</title>
    <url>/2019/12/09/Html/%E5%B8%B8%E7%94%A8%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<h3 id="常用特殊字符"><a href="#常用特殊字符" class="headerlink" title="常用特殊字符"></a>常用特殊字符</h3><table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
<th>编码</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>空格</td>
<td>&amp;nbsp;</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>Html/字体格式化标签</title>
    <url>/2019/12/09/Html/%E5%AD%97%E4%BD%93%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h3 id="字体格式化标签"><a href="#字体格式化标签" class="headerlink" title="字体格式化标签"></a>字体格式化标签</h3><pre><code class="html">&lt;strong&gt;强调&lt;/strong&gt;
&lt;b&gt;&lt;/b&gt;</code></pre>
<pre><code class="html">&lt;small&gt;小号字体&lt;/small&gt;</code></pre>
<pre><code class="html">&lt;sub&gt;下标字体&lt;/sub&gt;
&lt;sup&gt;上标字体&lt;/sup&gt;</code></pre>
<pre><code class="html">&lt;em&gt;斜体&lt;/em&gt;
&lt;i&gt;斜体&lt;/i&gt;  &lt;!-- 不推荐用 --&gt;</code></pre>
<pre><code class="html">&lt;ins&gt;下划线&lt;/ins&gt;
&lt;del&gt;删除线&lt;/del&gt;</code></pre>
<h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><pre><code class="html">&lt;img src=&quot;图片路径&quot; alt=&quot;图片加载失败的替换文本&quot;&gt;</code></pre>
]]></content>
  </entry>
  <entry>
    <title>博客/hexo安装记录</title>
    <url>/2019/11/26/%E5%8D%9A%E5%AE%A2/hexo%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="hexo安装记录"><a href="#hexo安装记录" class="headerlink" title="hexo安装记录"></a>hexo安装记录</h1><p>如果<code>hexo init</code>安装过慢，请使用淘宝源。</p>
<p>更换镜像的教程如下： <a href="https://www.jianshu.com/p/26640fbad18e" target="_blank" rel="noopener">https://www.jianshu.com/p/26640fbad18e</a></p>
<ol>
<li>通过<code>config</code>命令</li>
</ol>
<pre><code class="bash">npm config set registry https://registry.npm.taobao.org
npm info underscore #如果上面配置正确这个命令会有字符串response</code></pre>
<ol>
<li>命令行指定</li>
</ol>
<pre><code class="bash">npm --registry https://registry.npm.taobao.org info underscore </code></pre>
<ol>
<li>编辑 <code>~/.npmrc</code> 加入下面内容</li>
</ol>
<pre><code class="bash">registry = https://registry.npm.taobao.org</code></pre>
<a id="more"></a>

<h3 id="将文件夹推送到github"><a href="#将文件夹推送到github" class="headerlink" title="将文件夹推送到github"></a>将文件夹推送到github</h3><p>使用<code>git init</code>命令</p>
<pre><code class="bash">//老版本
git clone https://github.com/iissnan/hexo-theme-next themes/next   
//新版本
git clone https://github.com/theme-next/hexo-theme-next themes/next




git config --global http.https://github.com.proxy https://127.0.0.1:1080
git config --global https.https://github.com.proxy https://127.0.0.1:1080
</code></pre>
<h2 id="Next主题配置"><a href="#Next主题配置" class="headerlink" title="Next主题配置"></a>Next主题配置</h2><pre><code class="sh">git clone https://github.com/theme-next/hexo-theme-next themes/next</code></pre>
<h3 id="Next安装后修改站点语言的问题"><a href="#Next安装后修改站点语言的问题" class="headerlink" title="Next安装后修改站点语言的问题"></a>Next安装后修改站点语言的问题</h3><blockquote>
<p>在安装后站点根目录配置文件/_config.yml中language属性是 zh-Hans，但是站点语言并不是中文？</p>
</blockquote>
<p>参考链接： <a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93251246" target="_blank" rel="noopener">https://blog.csdn.net/mqdxiaoxiao/article/details/93251246</a> </p>
<h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><pre><code class="sh">$ hexo n &quot;博客名称&quot;  =&gt; hexo new &quot;博客名称&quot;   #这两个都是创建新文章，前者是简写模式
$ hexo p  =&gt; hexo publish
$ hexo g  =&gt; hexo generate  #生成
$ hexo s  =&gt; hexo server  #启动服务预览
$ hexo d  =&gt; hexo deploy  #部署</code></pre>
<pre><code class="sh">$ hexo g &amp;&amp; hexo s  #通过此命令生成本地网页预览，然后可在localhost:4000查看页面效果</code></pre>
<pre><code class="sh">$ hexo server   #Hexo 会监视文件变动并自动更新，无须重启服务器。
$ hexo server -s   #静态模式
$ hexo server -p 5000   #更改端口
$ hexo server -i 192.168.1.1   #自定义IP
$ hexo clean   #清除缓存，网页正常情况下可以忽略此条命令
$ hexo g   #生成静态网页
$ hexo d   #开始部署</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
